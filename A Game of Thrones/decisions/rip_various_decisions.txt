targeted_decisions = {
	
	release_tributary = {
		only_playable = yes
		from_potential = {
			ai = no
		}
		potential = {
			is_tributary = yes
			suzerain = { character = FROM }
		}
		allow = {
			war = no
			FROM = { war = no }
		}
		effect = {
			remove_tributary = FROM
			prestige = -200
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}

	break_non_aggression_pact = {
		only_playable = yes
		from_potential = {
			ai = no
		}
		potential = {
			is_landed = yes
			has_non_aggression_pact_with = FROM
		}
		allow = {
			FROM = { prestige = 200 }
			war = no
			FROM = { war = no }
		}
		effect = {
			opinion = {
				who = FROM
				modifier = broken_non_aggression_pact
				duration = -1
			}
			FROM = { 
				prestige = -200
				add_character_modifier = {
					name = broken_non_aggression_pact_char_modifier
					years = 10
				}
			}
			
			FROM = {
				set_truce = {
					who = ROOT
					years = 2
				}
				hidden_tooltip = { character_event = { id = 45361 days = 1 } }#check for tyranny for going against council
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
	
	recruit_prisoner = {
		filter = court
		ai_target_filter = court
		only_playable = yes
		
		from_potential = {
			ai = no
			has_dlc = "Reapers"
		}
		
		potential = {
			prisoner = yes
			is_ruler = no
			is_adult = yes
			is_heir = no
			is_married = no
			NOT = { trait = incapable }
			host = { character = FROM }
			liege = {
				NOT = { character = FROM }
			}
			NOT_mythical_creature_trigger = yes
		}
		
		allow = {
			liege = {
				NOR = {
					is_lover = ROOT
					is_friend = ROOT
					is_child_of = ROOT
					is_mother = ROOT
					is_father = ROOT
				}
			}
			NOT = {
				is_rival = FROM
			}
			NOT = { trait = kingsguard }
			NOT = { trait = nightswatch }
			opinion_diff = {
				first = FROM
				second = liege
				value = -25
			}
			opinion = { who = FROM value = -24 }
		}
		
		effect = {
			hidden_tooltip = {
				liege = {
					character_event = { id = RIP.29700 }
				}
			}
			if = {
				limit = {
					is_consort = yes
					is_female = yes
				}
				consort = {
					remove_consort = ROOT
				}
			}
			if = {
				limit = { trait = slave }
				liege = {
					opinion = {
						who = FROM
						modifier = opinion_stole_slave
					}
				}
				if = {
					limit = {
						FROM = {
							OR = {
								crownlaw_title = { NOT = { has_law = slavery_0 } }
								AND = {
									independent = yes
									NOT = { crownlaw_title = { always = yes } }
									NOT = { trait = nightswatch }
									OR = {
										has_slavery_culture_trigger = yes
										has_slavery_religion_trigger = yes
									}
								}
							}	
						}
					}
					hidden_tooltip = {
						liege = {
							remove_opinion = { who = PREV modifier = opinion_my_slave }
							reverse_remove_opinion = { who = PREV modifier = opinion_my_owner }
						}
						opinion = { who = FROM modifier = opinion_my_owner }
						reverse_opinion = { who = FROM modifier = opinion_my_slave }
					}
				}
				if = {
					limit = {
						FROM = {
							NOR = {
								crownlaw_title = { NOT = { has_law = slavery_0 } }
								AND = {
									independent = yes
									NOT = { crownlaw_title = { always = yes } }
									NOT = { trait = nightswatch }
									OR = {
										has_slavery_culture_trigger = yes
										has_slavery_religion_trigger = yes
									}
								}
							}
						}
					}
					tooltip = { remove_trait = slave }
					hidden_tooltip = { character_event = { id = slavery.0 } }
				}			
			}
			move_character = FROM
			prisoner = no
			hidden_tooltip = { FROM = { character_event = { id = 45361 days = 1 } } }#check for tyranny for going against council
		}
		
		revoke_allowed = {
			always = no
		}
		
		ai_will_do = {
			factor = 0
		}
	}
	
	ask_to_leave_court = {
		filter = court
		ai_target_filter = court
		only_playable = yes
		
		from_potential = {
			ai = no
			has_dlc = "Reapers"
		}
		potential = {
			liege = { character = FROM }
			NOR = {
				is_ruler = yes
				is_landed = yes			
				dynasty = FROM
				is_married = FROM
				is_consort = FROM
				is_adult = no
				is_close_relative = FROM
				has_character_flag = eternal_life_mystic
				has_character_flag = immortal_rival
				trait = horse				
				trait = slave
			}
			NOT_mythical_creature_trigger = yes
		}
		allow = {
			NOR = {
				trait = incapable
				trait = kingsguard
				trait = nightswatch
				trait = archmaester
				has_character_modifier = in_seclusion
				has_job_title = yes
				is_voter = yes
				has_minor_title = title_regent
				has_minor_title = title_appointed_regent
				has_minor_title = title_commander
				prisoner = yes
			}	
		}
		effect = {
			FROM = { prestige = -5 }
		
			opinion = {
				modifier = opinion_disappointed
				who = FROM
				years = 10
			}
			custom_tooltip = {
				text = TOOLTIPask_to_leave_court
				hidden_tooltip = {				
					random_spouse = {
						limit = {
							is_alive = yes
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
						}
						if = { 	
							limit = { is_ruler = yes }
							ROOT = { move_character = PREV }
							break = yes
						}
						if = { 
							limit = { 
								is_ruler = no 
								liege = { NOT = { character = FROM } }
							}
							liege = { ROOT = { move_character = PREV } }
							break = yes
						}
					}
					random_child = {
						limit = {
							is_alive = yes
							is_ruler = yes
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
						}
						ROOT = { move_character = PREV }
						break = yes
					}
					father = {
						if = {
							limit = {
								is_alive = yes
								NOT = { trait = nightswatch }
								NOT = { any_liege = { trait = nightswatch } }
							}
							if = { 	
								limit = { is_ruler = yes }
								ROOT = { move_character = PREV }
								break = yes
							}
							if = { 
								limit = { 
									is_ruler = no 
									liege = { NOT = { character = FROM } }
								}
								liege = { ROOT = { move_character = PREV } }
								break = yes
							}
						}	
					}
					mother = {
						if = {
							limit = {
								is_alive = yes
								NOT = { trait = nightswatch }
								NOT = { any_liege = { trait = nightswatch } }
							}
							if = { 	
								limit = { is_ruler = yes }
								ROOT = { move_character = PREV }
								break = yes
							}
							if = { 
								limit = { 
									is_ruler = no 
									liege = { NOT = { character = FROM } }
								}
								liege = { ROOT = { move_character = PREV } }
								break = yes
							}
						}	
					}
					random_dynasty_member = {
						limit = {
							is_alive = yes
							is_ruler = yes
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
							NOT = { dynasty = 0 }
							NOT = { character = FROM }
						}
						ROOT = { move_character = PREV }
						break = yes
					}
					random_spouse = {
						random_dynasty_member = {
							limit = {
								is_alive = yes
								is_ruler = yes
								NOT = { trait = nightswatch }
								NOT = { any_liege = { trait = nightswatch } }
								NOT = { dynasty = 0 }
								NOT = { character = FROM }
							}
							ROOT = { move_character = PREV }
							break = yes
						}	
					}
					random_dynasty_member = {
						limit = {
							is_alive = yes
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
							NOT = { dynasty = 0 }
							NOT = { character = FROM }
						}
						if = { 	
							limit = { is_ruler = yes }
							ROOT = { move_character = PREV }
							break = yes
						}
						if = { 
							limit = { 
								is_ruler = no 
								liege = { NOT = { character = FROM } }
							}
							liege = { ROOT = { move_character = PREV } }
							break = yes
						}
					}		
					random_friend = {
						limit = {
							is_alive = yes
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
							NOT = { character = FROM }
						}
						if = { 	
							limit = { is_ruler = yes }
							ROOT = { move_character = PREV }
							break = yes
						}
						if = { 
							limit = { 
								is_ruler = no 
								liege = { NOT = { character = FROM } }
							}
							liege = { ROOT = { move_character = PREV } }
							break = yes
						}
					}
					top_liege = {
						random_realm_lord = {
							limit = {
								demesne_size = 1
								OR = {
									religion = ROOT
									culture_group = ROOT
								}
								OR = {
									is_patrician = yes
									NOT = { tier = BARON }
								}
								NOT = { character = FROM }							
								NOT = { trait = nightswatch }
								NOT = { any_liege = { trait = nightswatch } }
								NOT = { culture_group = unoccupied_group }
								OR = {
									NOT = { trait = wildling }
									ROOT = { trait = wildling }
								}	
								OR = {
									NOT = { trait = pirate }
									ROOT = { trait = pirate }
								}
							}
							ROOT = { move_character = PREV }
							break = yes
						}
					}
					random_playable_ruler = {
						limit = {
							demesne_size = 1
							OR = {
								higher_tier_than = DUKE
								culture_group = ROOT
							}
							is_within_diplo_range = FROM
							NOT = { character = FROM }							
							NOT = { trait = nightswatch }
							NOT = { any_liege = { trait = nightswatch } }
							NOT = { culture_group = unoccupied_group }
							OR = {
								NOT = { trait = wildling }
								ROOT = { trait = wildling }
							}	
							OR = {
								NOT = { culture = old_andal }
								higher_tier_than = DUKE
								ROOT = { culture = old_andal }
							}
							OR = {
								NOT = { culture = rhoynar }
								higher_tier_than = DUKE
								ROOT = { culture = rhoynar }
							}	
							OR = {
								NOT = { trait = pirate }
								ROOT = { trait = pirate }
							}			
						}
						ROOT = { move_character = PREV }
						break = yes
					}
					banish = yes
				}
			}	
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
	
	exchange_land_for_hospital = {
		filter = all
		ai_target_filter = all
		only_playable = yes
		
		from_potential = {
			ai = no
			#capital has space and no hospital
			capital_scope = {
				num_of_empty_holdings = 1
				NOT = {
					hospital_level = 1
				}
			}
			NOR = {
				is_nomadic = yes
				is_tribal = yes
			}
		}
		potential = {
			is_adult = yes
			#owns holy order, this religion
			primary_title = { holy_order = yes }
			religion = FROM
			
		}
		allow = {
			FROM = {
				piety = 300
				capital_scope = {
					any_province_holding = {
						is_occupied = no
					}
				}
			}
		}
		effect = {
			#lose piety, holy order builds castle and hospital
			FROM = {
				piety = -300
				capital_scope = {
					build_holding = {
						type = castle
						holder = ROOT
					}
					build_holding = {
						type = hospital
						holder = FROM
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
	
	commit_suicide_immortal = {
		filter = self
		ai_target_filter = self
		
		potential = {
			ai = no
			is_adult = yes
			prisoner = no
			immortal = yes

			OR = {
				trait = depressed
				age = 100
			}
		}
		

		allow = {
			immortal = yes
			OR = {
				trait = depressed
				age = 100
			}
			custom_tooltip = {
				NOT = { has_character_flag = attempting_suicide }
				text = attempting_suicide_tooltip
			}
		}

		effect = {
			if = {
				limit = { has_dlc = "Reapers" }

				set_character_flag = attempting_suicide

				if = {
					limit = { NOT = { trait = incapable } }
					character_event = { id = RIP.30200 }
				}
				if = {
					limit = { trait = incapable } 
					character_event = { id = RIP.30210 }
				}
			}
			if = {
				limit = { NOT = { has_dlc = "Reapers" } }

				prestige = -200

				add_character_modifier = {
					modifier = suicide
					duration = -1
				}
				death = { death_reason = death_suicide }
			}
		}

		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
}

decisions = {
	seek_treatment = {
		only_playable = yes
		is_high_prio = yes
		
		potential = {
			is_playable = yes
			OR = {
				character_disease_trigger = yes
				num_of_symptoms = 1
			}
			job_spiritual = { always = yes }
			NOT = { trait = old_ones_scourge }
		}
		
		allow = {
			custom_tooltip = {
				text = seek_treatment_tooltip_2
				OR = {
					NOT = { has_character_flag = being_treated }
					had_character_flag = { flag = being_treated days = 20 }
				}
				OR = {
					AND = {	#if you have a developed disease and want further treatment
						character_disease_trigger = yes
						OR = {
							NOT = { has_character_flag = recent_treatment }
							had_character_flag = { flag = recent_treatment days = 90 }
						}
					}
					AND = {	#if you have multiple symptoms and want to seek further treatment
						num_of_symptoms = 2
						OR = {
							NOT = { has_character_flag = recent_treatment }
							had_character_flag = { flag = recent_treatment days = 30 }
						}
					}
					AND = { #if your treatment failed and you want to try again
						character_disease_trigger = no
						num_of_symptoms = 1
						OR = {
							had_character_flag = { flag = disease_not_serious days = 10 } #anti-spam delay since event should handle this normally
							had_character_flag = { flag = developing_illness days = 10 }
						}
						OR = {
							NOT = { has_character_flag = recent_treatment }
							had_character_flag = { flag = recent_treatment days = 30 }
						}
						NOR = {
							has_character_modifier = successful_treatment_1
							has_character_modifier = successful_treatment_2
							has_character_modifier = successful_treatment_3
							has_character_modifier = failed_treatment_1
							has_character_modifier = failed_treatment_2
							has_character_modifier = mystic_treatment_decent
							has_character_modifier = mystic_treatment_poor
							has_character_modifier = mystic_treatment_terrible
							has_character_modifier = symptom_treatment_1
							has_character_modifier = symptom_treatment_2
							has_character_modifier = symptom_treatment_3
							has_character_modifier = symptom_treatment_4
						}
					}
				}
			}
			custom_tooltip = {
				text = seek_treatment_tooltip_1
			}
			custom_tooltip = {
				text = seek_treatment_tooltip_3
				hidden_tooltip = {
					NOR = {
						has_character_modifier = mystic_treatment_decent
						has_character_modifier = successful_treatment_1
						has_character_modifier = successful_treatment_2
						has_character_modifier = successful_treatment_3
					}
				}
			}
		}
		effect = {
			set_character_flag = recent_treatment
			hidden_tooltip = {
				remove_treatment_modifiers_effect = yes
			}
			custom_tooltip = {
				text = seek_treatment_tooltip_4
				hidden_tooltip = {
					job_spiritual = {
						character_event = { id = RIP.11031 }
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0.25

			modifier = {
				factor = 2
				OR = {
					trait = craven
					trait = paranoid
				}
			}

			modifier = {
				factor = 1.4
				NOT = { health = 5 }
			}
			modifier = {
				factor = 1.4
				NOT = { health = 4 }
			}
			modifier = {
				factor = 1.4
				NOT = { health = 3 }
			}
			modifier = {
				factor = 1.4
				NOT = { health = 2 }
			}
			modifier = {
				factor = 1.4
				NOT = { health = 1 }
			}
			
			modifier = {
				factor = 0
				OR = {
					has_character_modifier = symptom_treatment_3 #characters don't want to seek treatment when they have a decent one already
					has_character_modifier = symptom_treatment_4
					AND = {
						has_character_modifier = symptom_treatment_2
						developing_epidemic_disease_trigger = no
					}
					has_character_modifier = successful_treatment_2
					has_character_modifier = successful_treatment_3
				}
			}
		}
	}

	employ_court_physician = {
		only_playable = yes
		is_high_prio = yes
		potential = {
			has_dlc = "Reapers"
			is_playable = yes
			OR = {
				is_landed = yes
				is_patrician = yes
			}
			NOR = {
				is_tribal = yes
				is_nomadic = yes
				maester_culture_trigger = yes
			}
			OR = {
				ai = no
				NOT = { job_spiritual = { always = yes } }
			}
		}
		allow = {
			NOT = { has_character_modifier = in_seclusion }
			custom_tooltip = {
				text = 3_year_physician_cooldown
				hidden_tooltip = {
					OR = {
						NOT = { has_character_flag = 3_year_physician_cooldown }
						had_character_flag = { flag = 3_year_physician_cooldown days = 1095 }
					}
				}
			}
		}
		effect = {
			custom_tooltip = {
				text = employ_court_physician_tooltip
				hidden_tooltip = {
					character_event = { id = RIP.11050 }
					clr_character_flag = 3_year_physician_cooldown
					set_character_flag = 3_year_physician_cooldown
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0.1
			
			modifier = {
				factor = 0
				NOT = { wealth = 25 }
			}
			modifier = {
				factor = 0
				AND = {
					tier = COUNT
					NOT = {
						any_close_relative = {
							ai = no
						}
					}
				}
			}
			modifier = {
				factor = 0.5
				NOR = {
					tier = KING
					tier = EMPEROR
				}
			}
			modifier = {
				factor = 2
				trait = paranoid
			}
			modifier = {
				factor = 10
				OR = {
					is_ill = yes
					num_of_symptoms = 1
				}
			}
		}
	}


	#Seclusion

	shut_the_gates = {
		only_rulers = yes
		is_high_prio = yes
				
		potential = {
			has_dlc = "Reapers"
			is_ruler = yes
			OR = {
				is_landed = yes
				is_patrician = yes
			}
			NOR = {
				is_tribal = yes
				is_nomadic = yes
				is_inaccessible_trigger = yes
			}
		}
		
		allow = {
			prisoner = no
			custom_tooltip = {
				text = is_not_busy_trigger_tooltip
				hidden_tooltip = { NOT = { has_character_flag = do_not_disturb } }
			}
			OR = {
				trait = paranoid
				custom_tooltip = {
					text = epidemic_present_tooltip
					hidden_tooltip = {
						OR = {						
							AND = {
								ai = yes
								capital_scope = {
									OR = {
										disease = bloody_flux
										disease = typhoid_fever
										disease = grey_plague
										disease = bubonic_plague
										#disease = measles
										disease = small_pox
										disease = syphilis
										disease = red_death
										any_neighbor_province = {
											OR = {
												disease = bloody_flux
												disease = typhoid_fever
												disease = grey_plague
												disease = bubonic_plague
												#disease = measles
												disease = small_pox
												disease = syphilis
												disease = red_death
											}
										}
									}								
								}
							}
							AND = {
								ai = no
								top_liege = {
									any_realm_province = {
										OR = {
											disease = bloody_flux
											disease = typhoid_fever
											disease = grey_plague
											disease = bubonic_plague
											#disease = measles
											disease = small_pox
											disease = syphilis
											disease = red_death
										}
									}
								}
							}
						}
					}
				}
			}
			NOT = { has_character_modifier = recently_opened_gates }
		}
		effect = {
			if = {
				limit = {
					has_minor_title = title_commander
				}
				remove_title = title_commander
			}
			set_character_flag = do_not_disturb
			custom_tooltip = { text = shut_the_gates_info_tooltip }
			add_character_modifier = {
				name = in_seclusion
				duration = -1
			}
			if = { # If you are a councillor, stop working and return home
				limit = {
					host = { NOT = { character = ROOT } }
					OR = {
						is_councillor = yes
						is_voter = yes
					}
				}
				cancel_job_action = yes
				force_host = ROOT
			}
			hidden_tooltip = {
				character_event = { id = RIP.12000 }
				any_courtier = { # Unlanded councillors stop working in order to go into seclusion with their liege
					limit = {
						prisoner = no
						is_councillor = yes
						is_landed = no
						liege = { character = ROOT }
						NOT = { character = ROOT }
					}
					cancel_job_action = yes
					add_character_modifier = {
						name = in_seclusion
						duration = -1
					}
				}
				any_courtier = { # Unlanded non-councillors join their liege in seclusion
					limit = {
						prisoner = no
						is_councillor = no
						is_landed = no
						liege = { character = ROOT }
						NOT = { character = ROOT }
						NOT_mythical_creature_trigger = yes
					}
					add_character_modifier = {
						name = in_seclusion
						duration = -1
					}
				}
				any_courtier = { # Landed councillors return home while you, their liege, is in seclusion
					limit = {
						prisoner = no
						OR = {
							is_councillor = yes
							is_voter = yes
						}
						is_landed = yes
						liege = { character = ROOT }
						NOT = { character = ROOT }
					}
					force_host = THIS
				}
				any_courtier = { # Landed children being educated in your court are sent home, with the guardianship ending
					limit = {
						prisoner = no
						is_landed = yes
						is_adult = no
						has_guardian = yes
					}
					remove_guardian = yes
				}
				if = { #If you are getting educated elsewhere, then go home to be secluded
					limit = {
						NOT = { age = 16 }
						is_abroad = yes
					}
					remove_guardian = yes
					force_host = ROOT
				}
				any_vassal = {
					character_event = { id = RIP.12001 days = 7 random = 7 }
				}
				if = { #Notify employer that councillor is going into seclusion
					limit = { 
						is_councillor = yes 
						liege = { ai = no }
					}
					liege = { letter_event = { id = RIP.12101 days = 1 } }
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0.1
			
			modifier = {
				factor = 0
				capital_scope = { NOT = { has_disease = yes } }
			}
			modifier = {
				factor = 0.01
				capital_scope = {
					OR = {
						disease = typhoid_fever
						disease = small_pox
						disease = old_ones_scourge
						#disease = measles
					}
				}
			}
			modifier = {
				factor = 0.5
				age = 65
			}
			modifier = {
				factor = 0.5
				trait = brave
			}
			modifier = {
				factor = 2
				trait = depressed
			}
			modifier = {
				factor = 2
				trait = stressed
			}
			modifier = {
				factor = 5
				trait = craven
			}
			modifier = {
				factor = 10
				trait = paranoid
			}
			modifier = {
				factor = 10
				capital_scope = { disease = bubonic_plague }
			}
		}
	}
	
	open_the_gates = {
		only_rulers = yes
		is_high_prio = yes
		
		potential = {
			is_ruler = yes
			has_character_modifier = in_seclusion
		}

		allow = {
			has_character_modifier = in_seclusion
		}

		effect = {
			clr_character_flag = do_not_disturb
			clr_character_flag = exposed_to_outside
			clr_character_flag = seclusion_piling_corpses
			clr_character_flag = seclusion_lazy_seduction
			clr_character_flag = seclusion_nightmares
			clr_character_flag = seclusion_gained_friend
			clr_character_flag = seclusion_child_has_lover
			clr_character_flag = seclusion_tunnel
			clr_character_flag = seclusion_food_events

			custom_tooltip = { text = open_the_gates_info_tooltip }
			remove_character_modifier = in_seclusion
			add_character_modifier = {
				name = recently_opened_gates
				duration = 365
			}
			hidden_tooltip = {
				clr_character_flag = seclusion_events_on
				character_event = { id = RIP.11557 days = 40 random = 20} #clears starvation modifiers
				any_courtier = {
					clr_character_flag = seclusion_events_on
					remove_character_modifier = in_seclusion
					character_event = { id = RIP.11557 days = 40 random = 20} #clears starvation modifiers
				}
				any_vassal = {
					limit = {
						OR = {
							is_councillor = yes
							is_voter = yes
						}
						is_landed = yes
						liege = { character = ROOT }
						NOT = {
							has_character_modifier = in_seclusion
						}
						host = { NOT = { character = ROOT } }
					}
					force_host = ROOT
				}
			}
			if = { # Rejoin your liege's court if both of you are not in seclusion
				limit = {
					OR = {
						is_councillor = yes
						is_voter = yes
					}
					NOT = {
						liege = {
							has_character_modifier = in_seclusion
						}
					}
				}
				liege = {
					save_event_target_as = liege_target
				}
				force_host = event_target:liege_target

				if = { #Notify employer that councillor is going into seclusion
					limit = { 
						is_councillor = yes 
						#liege = { ai = no }
					}
					liege = { character_event = { id = RIP.12100 days = 1 } }
				}
			}

			if = { limit = { has_character_modifier = secluded_revelry } remove_character_modifier = secluded_revelry }
			if = { limit = { has_character_modifier = savoring_the_end_days } remove_character_modifier = savoring_the_end_days }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0.1

			modifier = {
				factor = 0
				capital_scope = { has_disease = yes }
				NOT = { has_character_modifier = starving_food_shortage }
			}
			modifier = {
				factor = 25
				capital_scope = { 
					has_disease = no 
					NOT = { any_neighbor_province = { has_disease = yes } }
				}
				NOT = { trait = paranoid }
			}
			modifier = {
				factor = 0.5
				trait = paranoid
			}
			modifier = {
				factor = 3
				trait = brave
			}
			modifier = {
				factor = 3
				capital_scope = { has_disease = no }
			}
			modifier = {
				factor = 3
				has_character_modifier = starving_food_shortage
			}
		}
	}
	
}

title_decisions = {
	build_hospital = {
		only_playable = yes
		hide_in_decisions_list = yes		# player can build hospitals from the province view
		ai_target_filter = owned
		
		from_potential = {					# scope: character who is building
			ai = yes
			is_playable = yes
			has_dlc = "Reapers"
			war = no
			wealth = 600
		}
		
		potential = {
			tier = COUNT
			has_hospital = no
			has_siege = no
			is_occupied = no
		}
		
		allow = {
			always = yes
		}
		
		ai_will_do = {
			factor = 0.1
			
			modifier = {
				factor = 0.1
				owner = { independent = no }
			}
			modifier = {
				factor = 0.1
				owner = { trait = greedy }
			}
			modifier = {
				factor = 0.1
				owner = { trait = arbitrary }
			}
			modifier = {
				factor = 0.1
				owner = { trait = slothful }
			}
			modifier = {
				factor = 0.1
				owner = { trait = zealous }
			}
			modifier = {
				factor = 0.1
				owner = { trait = content }
			}
			modifier = {
				factor = 5
				owner = { has_character_flag = seen_the_light_of_modern_medicine }
			}
			modifier = {
				factor = 2
				is_capital = yes
			}
			modifier = {
				factor = 2
				OR = {
					owner = { is_ill = yes }
					owner = { num_of_symptoms = 1 }
				}
			}
			modifier = {
				factor = 2
				owner = { trait = charitable }
			}
			modifier = {
				factor = 2
				owner = { trait = diligent }
			}
			modifier = {
				factor = 2
				owner = { trait = kind }
			}
			modifier = {
				factor = 2
				owner = { trait = erudite }
			}
		}
		
		effect = {
			location = {
				build_holding = {
					type = hospital
				}
			}
		}
	}
}
	