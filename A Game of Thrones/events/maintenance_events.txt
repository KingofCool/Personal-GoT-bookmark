namespace = maintenance

#Includes CK2+ events###
#maintenance.1-2	#Tyranny
#maintenance.3-4	#Dishonour
#maintenance.5 	#General yearly maintenance
#maintenance.6	#Ai marriage maintenance
#maintenance.7	#AI gives honorary title
#maintenance.9	#Remove just
# maintenance.12	#AI plot check
#maintenance.14	#AI ambition check
#maintenance.16	#AI selects a bodyguard
#maintenance.17	#AI selects a commander
#maintenance.18	#AI fires commander
#maintenance.19	#Check for CK2 version
#maintenance.20	#King vassalised in a war, organise titles
#maintenance.21	#Usurped title, take dejure vassals
#maintenance.22	#Organise mega war flags post war 
#maintenance.23	#Organise mega war flags post 'other claim' war
#maintenance.24	#Mega war flag maintenance post victory
#maintenance.25	#Subjugation flag maintenance
#maintenance.26	#laws return to default bug, set empire laws to compensate
#maintenance.27	#If capital of a merchant republic is usurped move their capital to another coastal province if possible
#maintenance.28	#After Checking cognatic realm inheritance switch realm back to cognatic
#maintenance.29	#Independent characters somehow ending up with no demesne #FIXED by patch 2.2
#maintenance.30	#Inform former vassal has usurped a title of equal or higher rank
#maintenance.31	#Auto adding honourary titles
#maintenance.32	#Head of House Yronwood is the Bloodroyal
#maintenance.33	#Show me small council event
#maintenance.34	#Refill holding levy post war (from cb_types)
#maintenance.35	#Win dejure war against wildling, take all occupied holdings (from cb_types)
#maintenance.36	#Iron Throne de jure kingdom war, assimilates de jure realm
#maintenance.37	#Crownland Maintenance for Iron Throne post war
#maintenance.39	# House Forrester names a Sentinel
#maintenance.40	#AI Gender Law Check
#maintenance.41	# Summerhall de jure title maintenance
#maintenance.42	#Check the capital of rulers with two or more provinces on startup
#maintenance.43	#Special titles for titular kingdoms, on_new_holder
#maintenance.44	#Mercenary dynasty fix, on_new_holder (stop lowborn successors taking the dynasty of predecessor)
#maintenance.45	#Mercenary culture fix, (stop new commanders taking the culture of the merc company)
#maintenance.46	#On ruler death, prevent important courtier culling
#maintenance.48	#Emperor gives away secondary empire maintenance
#maintenance.49	#Ai job action control
#maintenance.50	# Give dragonss a fake focus so as to avoid the annoying pop up for players
#maintenance.51	# Empire crown law maintenance
#maintenance.52	# Empire AI vassal limit management (make them give kingdom titles)
#maintenance.53	# Rainwood de jure title maintenance
#maintenance.54	# Triggered modifiers
#maintenance.56	# Debt modifier

#Add to tyranny, only add tyranny via this script:
# change_variable = { which = "tyrant" value = x } 
# hidden_tooltip = { character_event = { id = maintenance.1 } }#tyrant trait

character_event = {
	id = maintenance.1	
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		remove_trait = tyrannical_stain
		remove_trait = tyrant1
		remove_trait = tyrant2
		remove_trait = tyrant3
		remove_trait = tyrant4
		remove_trait = tyrant5
		remove_trait = tyrant6
		remove_trait = tyrant7
		remove_trait = tyrant8
		remove_trait = tyrant9
		remove_trait = tyrant10
		remove_trait = tyrant11
		remove_trait = tyrant12
		remove_trait = tyrant13
		remove_trait = tyrant14
		remove_trait = tyrant15
		remove_trait = tyrant16
		remove_trait = tyrant17
		remove_trait = tyrant18
		remove_trait = tyrant19
		remove_trait = tyrant20
		if = {
			limit = {
				NOT = { check_variable = { which = "tyrant" value = 4.9 } }
			}
			break = yes
		}
		if = {
			limit = { NOT = { has_character_flag = tyranny_decay_check } }
			set_character_flag = tyranny_decay_check
			character_event = { id = maintenance.2 days = 1825 } #Tyranny decays every 5 years
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 4.9 }
				NOT = { check_variable = { which = "tyrant" value = 9.9 } }
			}
			add_trait = tyrant1
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 9.9 }
				NOT = { check_variable = { which = "tyrant" value = 14.9 } }
			}
			add_trait = tyrant2	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 14.9 }
				NOT = { check_variable = { which = "tyrant" value = 19.9 } }
			}
			add_trait = tyrant3
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 19.9 }
				NOT = { check_variable = { which = "tyrant" value = 24.9 } }
			}
			add_trait = tyrant4	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 24.9 }
				NOT = { check_variable = { which = "tyrant" value = 29.9 } }
			}
			add_trait = tyrant5		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 29.9 }
				NOT = { check_variable = { which = "tyrant" value = 34.9 } }
			}
			add_trait = tyrant6	
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 34.9 }
				NOT = { check_variable = { which = "tyrant" value = 39.9 } }
			}
			add_trait = tyrant7	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 39.9 }
				NOT = { check_variable = { which = "tyrant" value = 44.9 } }
			}
			add_trait = tyrant8	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 44.9 }
				NOT = { check_variable = { which = "tyrant" value = 49.9 } }
			}
			add_trait = tyrant9
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 49.9 }
				NOT = { check_variable = { which = "tyrant" value = 54.9 } }
			}
			add_trait = tyrant10
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 54.9 }
				NOT = { check_variable = { which = "tyrant" value = 59.9 } }
			}
			add_trait = tyrant11
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 59.9 }
				NOT = { check_variable = { which = "tyrant" value = 64.9 } }
			}
			add_trait = tyrant12
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 64.9 }
				NOT = { check_variable = { which = "tyrant" value = 69.9 } }
			}
			add_trait = tyrant13
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 69.9 }
				NOT = { check_variable = { which = "tyrant" value = 74.9 } }
			}
			add_trait = tyrant14
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 74.9 }
				NOT = { check_variable = { which = "tyrant" value = 79.9 } }
			}
			add_trait = tyrant15
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 79.9 }
				NOT = { check_variable = { which = "tyrant" value = 84.9 } }
			}
			add_trait = tyrant16
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 84.9 }
				NOT = { check_variable = { which = "tyrant" value = 89.9 } }
			}
			add_trait = tyrant17
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 89.9 }
				NOT = { check_variable = { which = "tyrant" value = 94.9 } }
			}
			add_trait = tyrant18
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 94.9 }
				NOT = { check_variable = { which = "tyrant" value = 99.9 } }
			}
			add_trait = tyrant19
			break = yes
		}						
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 99.9 }
			}
			add_trait = tyrant20
			set_variable = { which = "tyrant" value = 100 }	#MAX		
		}
	}
	
	option = {
		name = "OK"
	}
}
#Five yearly tyranny reduction
character_event = {
	id = maintenance.2
	
	is_triggered_only = yes
	hide_window = yes
	
	desc = EVTDESCmaintenance.2
	
	# trigger = {
		# check_variable = { which = "tyrant" value = 0.9 }
	# }
	
	immediate = {
		clr_character_flag = tyranny_decay_check		
		if = {
			limit = {
				NOT = { check_variable = { which = "tyrant" value = 9.9 } }		
			}
			set_variable = { which = "tyrant" value = 0 }			
		}	
		if = {
			limit = {
				check_variable = { which = "tyrant" value = 9.9 }				
			}
			change_variable = { which = "tyrant" value = -5 }
			set_character_flag = tyranny_decay_check	
			character_event = { id = maintenance.2 days = 1825 } #Check again in five years
		}
		if = { #recalculate tyranny trait
			limit = { NOT = { trait = tyrannical_stain } }
			character_event = { id = maintenance.1 }
		}
		if = {
			limit = { 
				trait = tyrannical_stain 
				NOT = { check_variable = { which = "tyrant" value = 0.9 } }
			}
			remove_trait = tyrannical_stain
		}		
	}
	
	option = {
		name = "OK"
	}
}

#Add to dishonour, only add dishonour via this script:
# change_variable = { which = "dishonorable" value = x } 
# hidden_tooltip = { character_event = { id = maintenance.3 } }#dishonour trait

character_event = {
	id = maintenance.3
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {	
		remove_trait = dishonorable1
		remove_trait = dishonorable2
		remove_trait = dishonorable3
		remove_trait = dishonorable4
		remove_trait = dishonorable5
		remove_trait = dishonorable6
		remove_trait = dishonorable7
		remove_trait = dishonorable8
		remove_trait = dishonorable9
		remove_trait = dishonorable10
		remove_trait = dyn_dishonorable1
		remove_trait = dyn_dishonorable2
		remove_trait = dyn_dishonorable3
		remove_trait = dyn_dishonorable4
		remove_trait = dyn_dishonorable5
		remove_trait = dyn_dishonorable6
		remove_trait = dyn_dishonorable7
		remove_trait = dyn_dishonorable8
		remove_trait = dyn_dishonorable9
		remove_trait = dyn_dishonorable10
		# if = {
			# limit = {
				# NOT = { check_variable = { which = "dishonorable" value = 9.9 } }
			# }
			# break = yes			
		# }
		if = {
			limit = { NOT = { has_character_flag = dishonor_decay_check } }
			set_character_flag = dishonor_decay_check
			character_event = { id = maintenance.4 days = 3650 } #Dishonor decays every 10 years
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 9.9 }
				NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
			}
			add_trait = dishonorable1
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 19.9 }
				NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
			}
			add_trait = dishonorable2		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 29.9 }
				NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
			}
			add_trait = dishonorable3		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 39.9 }
				NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
			}
			add_trait = dishonorable4		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 49.9 }
				NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
			}
			add_trait = dishonorable5		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 59.9 }
				NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
			}
			add_trait = dishonorable6	
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 69.9 }
				NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
			}
			add_trait = dishonorable7		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 79.9 }
				NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
			}
			add_trait = dishonorable8		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 89.9 }
				NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
			}
			add_trait = dishonorable9
			break = yes
		}					
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 99.9 }
			}
			add_trait = dishonorable10
			set_variable = { which = "dishonorable" value = 100 }	#MAX		
		}
	}
	
	option = {
		name = "OK"
	}
}
#10 yearly dishonour reduction
character_event = {
	id = maintenance.4
	
	is_triggered_only = yes
	hide_window = yes
	
	desc = EVTDESCmaintenance.4
	
	# trigger = {
		# check_variable = { which = "dishonorable" value = 0.9 }
	# }
	
	immediate = {
		clr_character_flag = dishonor_decay_check	
		if = {
			limit = {
				NOT = { check_variable = { which = "dishonorable" value = 19.9 } }		
			}
			set_variable = { which = "dishonorable" value = 0 }
		}	
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 19.9 }				
			}
			change_variable = { which = "dishonorable" value = -10 }
			set_character_flag = dishonor_decay_check	
			character_event = { id = maintenance.4 days = 1825 } #Check again in five years
		}
		if = { #Standard dishonour
			limit = {
				OR = {
					trait = dishonorable1
					trait = dishonorable2
					trait = dishonorable3
					trait = dishonorable4
					trait = dishonorable5
					trait = dishonorable6
					trait = dishonorable7
					trait = dishonorable8
					trait = dishonorable9
					trait = dishonorable10
				}
			}
			remove_trait = dishonorable1
			remove_trait = dishonorable2
			remove_trait = dishonorable3
			remove_trait = dishonorable4
			remove_trait = dishonorable5
			remove_trait = dishonorable6
			remove_trait = dishonorable7
			remove_trait = dishonorable8
			remove_trait = dishonorable9
			remove_trait = dishonorable10
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 9.9 }
					NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
				}
				add_trait = dishonorable1		
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 19.9 }
					NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
				}
				add_trait = dishonorable2	
				break = yes				
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 29.9 }
					NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
				}
				add_trait = dishonorable3		
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 39.9 }
					NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
				}
				add_trait = dishonorable4		
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 49.9 }
					NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
				}
				add_trait = dishonorable5		
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 59.9 }
					NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
				}
				add_trait = dishonorable6	
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 69.9 }
					NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
				}
				add_trait = dishonorable7	
				break = yes				
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 79.9 }
					NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
				}
				add_trait = dishonorable8		
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 89.9 }
					NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
				}
				add_trait = dishonorable9
				break = yes
			}
			if = {
				limit = {
					check_variable = { which = "dishonorable" value = 99.9 }
				}
				add_trait = dishonorable10
			}
			break = yes
		}
		#Dynastic Stain
		remove_trait = dyn_dishonorable1
		remove_trait = dyn_dishonorable2
		remove_trait = dyn_dishonorable3
		remove_trait = dyn_dishonorable4
		remove_trait = dyn_dishonorable5
		remove_trait = dyn_dishonorable6
		remove_trait = dyn_dishonorable7
		remove_trait = dyn_dishonorable8
		remove_trait = dyn_dishonorable9
		remove_trait = dyn_dishonorable10
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 9.9 }
				NOT = { check_variable = { which = "dishonorable" value = 19.9 } }
			}
			add_trait = dyn_dishonorable1		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 19.9 }
				NOT = { check_variable = { which = "dishonorable" value = 29.9 } }
			}
			add_trait = dyn_dishonorable2	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 29.9 }
				NOT = { check_variable = { which = "dishonorable" value = 39.9 } }
			}
			add_trait = dyn_dishonorable3	
			break = yes			
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 39.9 }
				NOT = { check_variable = { which = "dishonorable" value = 49.9 } }
			}
			add_trait = dyn_dishonorable4		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 49.9 }
				NOT = { check_variable = { which = "dishonorable" value = 59.9 } }
			}
			add_trait = dyn_dishonorable5		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 59.9 }
				NOT = { check_variable = { which = "dishonorable" value = 69.9 } }
			}
			add_trait = dyn_dishonorable6	
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 69.9 }
				NOT = { check_variable = { which = "dishonorable" value = 79.9 } }
			}
			add_trait = dyn_dishonorable7		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 79.9 }
				NOT = { check_variable = { which = "dishonorable" value = 89.9 } }
			}
			add_trait = dyn_dishonorable8		
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 89.9 }
				NOT = { check_variable = { which = "dishonorable" value = 99.9 } }
			}
			add_trait = dyn_dishonorable9
			break = yes
		}
		if = {
			limit = {
				check_variable = { which = "dishonorable" value = 99.9 }
			}
			add_trait = dyn_dishonorable10
		}
	}
	
	option = {
		name = "OK"
	}
}
#General yearly maintenance
character_event = {
	id = maintenance.5
	
	is_triggered_only = yes
	hide_window = yes
	only_playable = yes
	
	trigger = {
		has_landed_title = c_the_citadel
	}
	
	immediate = {
		#Count Dragons
		if = {
			limit = { NOT = { has_global_flag = age_of_dragons } }
			if = {
				limit = {
					dragon = {
						is_alive = yes
						NOT = { has_character_flag = shadow_lands_dragon }
						count = 4						
					}
				}
				dragon = {
					limit = {
						is_alive = yes
						NOT = { has_character_flag = shadow_lands_dragon }
					}
					set_global_flag = age_of_dragons
					narrative_event = { id = dragon.76 }
				}	
			}				
		}	
		if = {
			limit = { 
				has_global_flag = age_of_dragons 
				NOT = { dragon = { is_alive = yes NOT = { has_character_flag = shadow_lands_dragon } } }
			} 
			clr_global_flag = age_of_dragons
			narrative_event = { id = dragon.77 }
		}
		#AI Holder of Harrenhal may offload to avoid curse
		if = {
			limit = { 
				c_harrenhal = {
					location = { 
						is_capital = no 
						NOT = { has_province_modifier = completeharren3 }
					}				
					holder_scope = {
						num_of_count_titles = 2
						ai = yes
						higher_tier_than = DUKE
					}
				}
			} 
			c_harrenhal = {
				holder_scope = {
					random_courtier = {
						limit = {
							is_ruler = no
							is_female = no
							age = 16
							is_primary_heir = no
							NOT = { trait = incapable }
							NOT = { trait = maester }
							NOT = { trait = archmaester }
							NOT = { trait = kingsguard }
							NOT = { trait = septon }
							NOT = { trait = red_priest }
							NOT = { trait = dragon }
							NOT = { trait = white_walker }
							NOT = { trait = winter_wasteland }
							NOT = { dynasty = PREV }
							reverse_opinion = { who = PREV value = -15 }
						}
						c_harrenhal = { grant_title = PREV }					
						set_defacto_liege = PREV
						if = {
							limit = { liege = { has_landed_title = d_harrenhal } } 
							d_harrenhal = { grant_title = PREV }
						}
					}				
				}
			}	
		}
	}
	
	option = {
		name = "OK"
	}
}
#AI marriage maintenance
character_event = {
	id = maintenance.6
	
	is_triggered_only = yes
	capable_only = yes
	prisoner = no
	min_age = 15
	ai = yes
	
	trigger = {
		OR = {
			is_married = no
			is_betrothed = yes
		}	
		OR = {
			is_female = no
			is_ruler = yes
			is_primary_heir = yes
			any_claim = { higher_tier_than = COUNT }
		}
		OR = {
			is_female = no
			NOT = { age = 45 }
		}
		OR = {
			AND = { #Rulers
				is_ruler = yes
				demesne_size = 1
				# OR = {
					# AND = { #Feudal barons
						# tier = BARON
						# is_feudal = yes
					# }	
					# AND = { #Non baron republics
						# higher_tier_than = BARON
						# is_feudal = no
					# }
				# }				
			}	
			AND = { #Unlanded courtiers
				NOT = { dynasty = 0 }	 #No lowborns
				NOT = { liege = { is_theocracy = yes } }
				OR = { #Either
					liege = { 
						OR = {
							dynasty = ROOT #Liege's family
							has_landed_title = d_golden_company
						}	
					} 
					any_claim = { higher_tier_than = COUNT } #Important claimant
					AND = { #Non-random in king court
						father_even_if_dead = { always = yes }
						liege = { 
							higher_tier_than = DUKE 
							OR = {
								is_nomadic = no
								ROOT = { martial = 10 }
							}
						}					
						OR = { #AND Must be important
							has_job_title = job_spymaster
							has_job_title = job_marshal
							has_job_title = job_treasurer
							has_job_title = job_chancellor
							has_job_title = job_castellan
							any_claim = { NOT = { tier = BARON } }
							any_heir_title = { always = yes }
							prestige = 400
							trait = dragon_rider
						}						
					}	
					# AND = { #primary feudal heir
						# is_primary_heir = yes							
						# liege = { is_feudal = yes }						
					# }					
				}
				OR = { #unlanded must be active region
					AND = {
						has_global_flag = westeros_active
						liege = { capital_scope = { region = world_westeros } }
					}
					AND = {
						has_global_flag = free_cities_active
						liege = { capital_scope = { region = world_free_cities } }
					}
					AND = {
						has_global_flag = slavers_bay_active
						liege = { capital_scope = { region = world_ghiscar } }
					}
					AND = {
						has_global_flag = grasslands_active
						liege = { capital_scope = { region = world_dothraki_sea } }
					}
					AND = {
						has_global_flag = summer_sea_active
						liege = { capital_scope = { region = world_summer_sea } }
					}
					AND = {
						has_global_flag = far_east_active
						liege = { 
							capital_scope = { 
								OR = {
									region = world_jade_sea
									region = world_far_east
								}	
							}
						}
					}
					AND = {
						has_global_flag = ibben_active
						liege = { capital_scope = { region = world_ibben } }
					}
				}
				liege = { 
					# OR = { #If liege is relative, liege must be ai baron
						# NOT = { is_close_relative = ROOT }
						# AND = {
							# ai = yes
							# tier = BARON
						# }
					# }
					OR = { #ask player first
						ai = yes
						AND = {
							NOT = { is_close_relative = ROOT } #Player handles family marriages
							NOT = { reverse_has_opinion_modifier = { who = ROOT modifier = opinion_denied_marriage } }				
						}
					}
				}	
			}	
		}		
		NOT = {
			primary_title = {		
				OR = {
					title = e_rebels
					title = e_pirates
				}
			}	
		}	
		
		OR = {
			betrothed = { #Fix silly betrothals
				dynasty = ROOT
				age_diff = { who = ROOT years = 15 }
			}
			AND = { #Must be able to marry
				age = 18
				can_marry_trigger = yes
				NOT = { has_character_modifier = maester_education }	
				NOT = { trait = celibate }
			}
		}	
		OR = { #homosexuals must be ambitious
			NOT = { trait = homosexual }
			trait = ambitious	
			has_ambition = obj_get_married
		}	
	}

	weight_multiplier = {
		days = 1
		
		modifier = {
			factor = 50
			has_ambition = obj_get_married
		}
		modifier = {
			factor = 5
			is_primary_heir = yes
		}
		modifier = {
			factor = 5
			any_claim = { higher_tier_than = COUNT }
		}
		modifier = {
			factor = 0.25
			trait = hedonist
		}
		modifier = {
			factor = 0.25
			trait = lustful
		}
		modifier = {
			factor = 4
			trait = chaste
		}
		
		modifier = {
			factor = 0.33
			NOT = { age = 20 }
		}
		modifier = {
			factor = 0.5
			NOT = { age = 25 }
		}
		modifier = {
			factor = 2
			age = 30
		}
		modifier = {
			factor = 2
			age = 35
		}
		modifier = {
			factor = 4
			age = 40
		}
	}

	desc = "EVTDESCmaintenance.6"

	immediate = {
		if = { #if young and unmarried maybe wait a little more
			limit = {
				is_betrothed = no
				NOT = { age = 25 }
				NOT = { has_ambition = obj_get_married }
			}
			random = {
				chance = 50
				break = yes
			}
		}
		if = {
			limit = { #ask player first
				is_ruler = no
				is_betrothed = no
				liege = { ai = no }
				NOT = { has_character_flag = permission_to_marry }
				NOT = { has_character_modifier = promised_a_marriage }
			}
			liege = { character_event = { id = 37051 } }
			break = yes
		}	
		clr_character_flag = permission_to_marry
		remove_character_modifier = promised_a_marriage 
		betrothed = { break_betrothal = ROOT }
		
		
		if = { #Female may desire for matrilineal marriage
			limit = {
				is_female = yes
				OR = {
					is_ruler = yes
					is_primary_heir = yes
				}
			}
			top_liege = {
				random_realm_lord = {
					limit = {		
						NOT = { tier = BARON }
						OR = {
							AND = {
								ROOT = { is_ruler = yes }
								lower_tier_than = ROOT
							}	
							ROOT = { 
								is_ruler = no
								liege = { higher_tier_than = PREVPREV }
							}
						}						
						OR = {
							higher_tier_than = DUKE
							culture = ROOT
							ROOT = { 
								is_ruler = yes
								lower_tier_than = KING							
							}
							ROOT = { 
								is_ruler = no
								liege = { lower_tier_than = KING }
							}
							AND = {
								tier = DUKE
								OR = {
									ROOT = {
										is_ruler = yes
										NOT = { tier = EMPEROR }
									}	
									ROOT = { 
										is_ruler = no
										liege = { NOT = { tier = EMPEROR } }
									}
									prestige = 600
								}	
							}						
						}
						ai = yes						
						is_theocracy = no	
						OR = {	
							AND = {
								ROOT = { 
									is_ruler = no 
									liege = {
										religion = PREVPREV
										reverse_opinion = { who = PREVPREV value = -15 }
										opinion = { who = PREVPREV value = -25 }
									}
								}								
							}
							AND = {
								ROOT = { is_ruler = yes }
								religion = ROOT
								opinion = { who = ROOT value = -15 }
								reverse_opinion = { who = ROOT value = -25 }
							}
						}						
						NOT = { dynasty = 0 }
						any_courtier = {
							is_female = no
							ai = yes	
							is_ruler = no
							prisoner = no
							dynasty = PREV
							is_close_relative = PREV
							NOT = { any_heir_title = { always = yes } }
							NOT = { any_pretender_title = { always = yes } }
							NOT = { father = { is_primary_heir = yes } }
							NOT = { mother = { is_primary_heir = yes } }
							OR = {
								NOT = { age_diff = { who = ROOT years = 10 } }
								AND = {
									ROOT = { age = 18 }
									age = 18
								}
							}	
							can_marry_trigger = yes
							NOT = { trait = celibate }
							NOT = { trait = incapable }
							NOT = { trait = inbred }
							NOT = { has_character_modifier = planning_claimant_adventure }
							NOT = { has_character_modifier = maester_education }
							NOT = { has_character_modifier = foreign_trainer }
							NOT = { liege = { is_theocracy = yes } }
							NOT = { trait = wikid }							
						}
					}
					random_courtier = {
						limit = {
							is_female = no
							ai = yes	
							is_ruler = no
							prisoner = no
							dynasty = PREV
							is_close_relative = PREV
							NOT = { any_heir_title = { always = yes } }
							NOT = { any_pretender_title = { always = yes } }
							NOT = { father = { is_primary_heir = yes } }
							NOT = { mother = { is_primary_heir = yes } }
							age = 14
							OR = {
								NOT = { age_diff = { who = ROOT years = 10 } }
								AND = {
									ROOT = { age = 18 }
									age = 18
								}
							}	
							can_marry_trigger = yes
							NOT = { trait = celibate }
							NOT = { trait = incapable }
							NOT = { trait = inbred }
							NOT = { has_character_modifier = planning_claimant_adventure }
							NOT = { has_character_modifier = maester_education }
							NOT = { has_character_modifier = foreign_trainer }
							NOT = { liege = { is_theocracy = yes } }
							NOT = { trait = wikid }	
						}
						add_spouse_matrilineal = ROOT
						ROOT = { 
							if = {
								limit = {
									NOT = { any_spouse = { is_main_spouse = no } }	
								}
								add_character_modifier = {
									name = "wedding"
									duration = 60
								}
							}
							clr_character_flag = keep_lowborn_marriage
						}
						break = yes
					}
				}
				ROOT = {
					if = { 
						limit = { is_ruler = yes }
						random_lover = {
							limit = {
								OR = {
									is_female = no
									NOT = { age = 35 }
								}	
								ai = yes	
								lower_tier_than = ROOT
								can_marry_trigger = yes
								is_pregnant = no
								prisoner = no
								NOT = { trait = celibate }
								NOT = { trait = incapable }
								NOT = { trait = inbred }
								NOT = { same_sex = ROOT }
								NOT = { sibling = ROOT }
								NOT = { is_child_of = ROOT }
								NOT = { is_father = ROOT }
								NOT = { is_mother = ROOT }
								NOT = { liege = { is_close_relative = PREV } }
							}
							ROOT = { 
								set_character_flag = no_wedding_event 
								add_spouse_matrilineal = PREV
								clr_character_flag = no_wedding_event 
							}	
							break = yes					
						}
					}
				}
				random_realm_character = {
					limit = {
						is_female = no
						is_ruler = no
						prisoner = no
						liege = { ai = yes }	
						NOT = { dynasty = 0 }
						father_even_if_dead = { always = yes }
						NOT = { any_heir_title = { always = yes } }
						NOT = { any_pretender_title = { always = yes } }
						NOT = { liege = { is_close_relative = PREV } }							
						is_primary_heir = no
						NOT = { father = { is_primary_heir = yes } }
						NOT = { mother = { is_primary_heir = yes } }
						age = 14
						OR = {
							NOT = { age_diff = { who = ROOT years = 10 } }
							AND = {
								ROOT = { age = 18 }
								age = 18
							}
						}	
						can_marry_trigger = yes
						NOT = { trait = celibate }
						NOT = { trait = incapable }
						NOT = { trait = inbred }
						NOT = { has_character_modifier = planning_claimant_adventure }
						NOT = { has_character_modifier = maester_education }
						NOT = { has_character_modifier = foreign_trainer }
						NOT = { liege = { is_theocracy = yes } }
						NOT = { trait = wikid }
						religion = ROOT
						reverse_opinion = { who = ROOT value = -15 }
						opinion = { who = ROOT value = -25 }
					}
					ROOT = { set_character_flag = no_wedding_event }
					add_spouse_matrilineal = ROOT
					ROOT = { 
						if = {
							limit = {
								NOT = { any_spouse = { is_main_spouse = no } }	
							}
							add_character_modifier = {
								name = "wedding"
								duration = 60
							}
						}
						clr_character_flag = keep_lowborn_marriage
						clr_character_flag = no_wedding_event
					}
					break = yes
				}
			}
			if = { #Generate a random as last resort
				limit = { 
					age = 34 
				}
				set_character_flag = no_wedding_event
				capital_scope = {
					ROOT = {
						create_character = {
							random_traits = yes
							dynasty = culture
							culture = PREV
							religion = PREV
							female = no
							age = 21
						}
						new_character = {
							set_character_flag = no_wedding_event
							add_spouse_matrilineal = ROOT
							if = {
								limit = { religion = the_seven }
								knight_character_effect = yes
							}
							random_list = {
								30 = { add_trait = poor_warrior }
								60 = { add_trait = trained_warrior }
								10 = { add_trait = skilled_warrior }
							}
							remove_trait = imbecile
							remove_trait = inbred
							remove_trait = celibate
							remove_trait = infirm
							remove_trait = incapable
							remove_trait = leper
							remove_trait = possessed
							remove_trait = ill
							remove_trait = pneumonic
							remove_trait = maimed
							clr_character_flag = no_wedding_event	
						}
					}	
				}
				clr_character_flag = no_wedding_event
				break = yes
			}
			break = yes
		}
		#Find marriage alliance
		if = { 
			limit = { 
				OR = {
					AND = {
						is_ruler = yes
						NOT = { tier = BARON }
					}	
					AND = {
						is_ruler = no
						liege = {
							NOT = { tier = BARON }
							dynasty = ROOT
							is_close_relative = ROOT
						}	
						OR = {
							is_female = no
							NOT = { age = 35 }
						}
					}				
				}					
			}	
			top_liege = {
				random_realm_lord = {
					limit = {		
						NOT = { tier = BARON }
						OR = {
							AND = {
								ROOT = { is_ruler = yes }
								NOT = { higher_tier_than = ROOT }
							}	
							ROOT = { 
								is_ruler = no
								liege = { NOT = { lower_tier_than = PREVPREV } }
							}
						}	
						OR = {
							higher_tier_than = DUKE
							culture = ROOT
							ROOT = { 
								is_ruler = yes
								lower_tier_than = KING							
							}
							ROOT = { 
								is_ruler = no
								liege = { lower_tier_than = KING }
							}
							AND = {
								tier = DUKE
								OR = {
									ROOT = {
										is_ruler = yes
										NOT = { tier = EMPEROR }
									}	
									ROOT = { 
										is_ruler = no
										liege = { NOT = { tier = EMPEROR } }
									}
									prestige = 600
								}	
							}						
						}
						ai = yes						
						is_theocracy = no	
						OR = {	
							AND = {
								ROOT = { 
									is_ruler = no 
									liege = {
										religion = PREVPREV
										reverse_opinion = { who = PREVPREV value = -15 }
										opinion = { who = PREVPREV value = -25 }
									}
								}								
							}
							AND = {
								ROOT = { is_ruler = yes }
								religion = ROOT
								opinion = { who = ROOT value = -15 }
								reverse_opinion = { who = ROOT value = -25 }
							}
						}						
						NOT = { dynasty = 0 }
						any_courtier = {
							OR = {
								is_female = no
								NOT = { age = 35 }
							}	
							ai = yes	
							dynasty = PREV
							is_close_relative = PREV
							can_marry_trigger = yes
							is_pregnant = no
							prisoner = no
							NOT = { trait = celibate }
							NOT = { trait = incapable }
							NOT = { trait = inbred }
							NOT = { same_sex = ROOT }
							NOT = { sibling = ROOT }
							NOT = { is_child_of = ROOT }
							NOT = { is_father = ROOT }
							NOT = { is_mother = ROOT }
							OR = {
								NOT = { age_diff = { who = ROOT years = 10 } }
								AND = {
									ROOT = { age = 18 }
									age = 18
									NOT = { age = 30 }
								}
							}	
						}
					}
					random_courtier = {
						limit = {
							OR = {
								is_female = no
								NOT = { age = 35 }
							}	
							ai = yes	
							dynasty = PREV
							is_close_relative = PREV
							can_marry_trigger = yes
							is_pregnant = no
							prisoner = no
							NOT = { trait = celibate }
							NOT = { trait = incapable }
							NOT = { trait = inbred }
							NOT = { same_sex = ROOT }
							NOT = { sibling = ROOT }
							NOT = { is_child_of = ROOT }
							NOT = { is_father = ROOT }
							NOT = { is_mother = ROOT }
							OR = {
								NOT = { age_diff = { who = ROOT years = 10 } }
								AND = {
									ROOT = { age = 18 }
									age = 18
									NOT = { age = 30 }
								}
							}	
						}
						add_spouse = ROOT
						if = {
							limit = {
								age = 14
								ROOT = { age = 14 }
							}
							ROOT = { 
								if = {
									limit = {
										NOT = { any_spouse = { is_main_spouse = no } }	
									}
									add_character_modifier = {
										name = "wedding"
										duration = 60
									}
								}
								clr_character_flag = keep_lowborn_marriage
							}
						}					
						child_fertility_debuff = yes
						ROOT = {				
							child_fertility_debuff = yes
						}
						
						###old block, betrothal command is broken NOW WORKS...or maybe not
						# if = {
							# limit = {
								# age = 14
								# ROOT = { age = 14 }
							# }
							# add_spouse = ROOT
							# ROOT = { 
								# if = {
									# limit = {
										# NOT = { any_spouse = { is_main_spouse = no } }	
									# }
									# add_character_modifier = {
										# name = "wedding"
										# duration = 60
									# }
								# }
								# clr_character_flag = keep_lowborn_marriage
							# }
						# }
						# if = {
							# limit = {
								# OR = {
									# NOT = { age = 14 }
									# ROOT = { NOT = { age = 14 } }
								# }	
							# }
							# ROOT = { 
								# remove_character_modifier = wedding
								# add_betrothal = PREV 
							# }
							# add_betrothal = ROOT
						# }
						break = yes
					}
				}
			}
			random_playable_ruler = {
				limit = {			
					OR = {
						AND = {
							ROOT = { is_ruler = yes }
							NOT = { higher_tier_than = ROOT }
						}	
						ROOT = { 
							is_ruler = no
							liege = { NOT = { lower_tier_than = PREVPREV } }
						}
					}	
					OR = {
						higher_tier_than = DUKE
						culture = ROOT
						ROOT = { 
							is_ruler = yes
							lower_tier_than = KING							
						}
						ROOT = { 
							is_ruler = no
							liege = { lower_tier_than = KING }
						}
						AND = {
							tier = DUKE
							OR = {
								ROOT = {
									is_ruler = yes
									NOT = { tier = EMPEROR }
								}	
								ROOT = { 
									is_ruler = no
									liege = { NOT = { tier = EMPEROR } }
								}
								prestige = 600
							}	
						}						
					}
					NOT = { character = ROOT }
					is_within_diplo_range = ROOT
					NOT = { war_with = ROOT }
					NOT = { any_liege = { war_with = ROOT } }
					NOT = { ROOT = { any_liege = { war_with = PREVPREV } } }
					ai = yes						
					is_theocracy = no	
					OR = {	
						AND = {
							ROOT = { 
								is_ruler = no 
								liege = {
									religion = PREVPREV
									reverse_opinion = { who = PREVPREV value = -15 }
									opinion = { who = PREVPREV value = -25 }
								}
							}								
						}
						AND = {
							ROOT = { is_ruler = yes }
							religion = ROOT
							opinion = { who = ROOT value = -15 }
							reverse_opinion = { who = ROOT value = -25 }
						}
					}					
					NOT = { dynasty = 0 }
					any_courtier = {
						OR = {
							is_female = no
							NOT = { age = 35 }
						}	
						ai = yes	
						dynasty = PREV
						is_close_relative = PREV
						can_marry_trigger = yes
						is_pregnant = no
						prisoner = no
						NOT = { trait = celibate }
						NOT = { trait = incapable }
						NOT = { trait = inbred }
						NOT = { same_sex = ROOT }
						NOT = { sibling = ROOT }
						NOT = { is_child_of = ROOT }
						NOT = { is_father = ROOT }
						NOT = { is_mother = ROOT }
						OR = {
							NOT = { age_diff = { who = ROOT years = 10 } }
							AND = {
								ROOT = { age = 18 }
								age = 18
								NOT = { age = 30 }
							}
						}
					}
				}
				random_courtier = {
					limit = {
						OR = {
							is_female = no
							NOT = { age = 35 }
						}	
						ai = yes	
						dynasty = PREV
						is_close_relative = PREV
						can_marry_trigger = yes
						is_pregnant = no
						prisoner = no
						NOT = { trait = celibate }
						NOT = { trait = incapable }
						NOT = { trait = inbred }
						NOT = { same_sex = ROOT }
						NOT = { sibling = ROOT }
						NOT = { is_child_of = ROOT }
						NOT = { is_father = ROOT }
						NOT = { is_mother = ROOT }
						OR = {
							NOT = { age_diff = { who = ROOT years = 10 } }
							AND = {
								ROOT = { age = 18 }
								age = 18
								NOT = { age = 30 }
							}
						}
					}
					add_spouse = ROOT
					if = {
						limit = {
							age = 14
							ROOT = { age = 14 }
						}
						ROOT = { 
							if = {
								limit = {
									NOT = { any_spouse = { is_main_spouse = no } }	
								}
								add_character_modifier = {
									name = "wedding"
									duration = 60
								}
							}
							clr_character_flag = keep_lowborn_marriage
						}
					}					
					child_fertility_debuff = yes
					ROOT = {				
						child_fertility_debuff = yes
					}
					
					###old block, betrothal command is broken  NOW WORKS...or maybe not
					# if = {
						# limit = {
							# age = 14
							# ROOT = { age = 14 }
						# }
						# add_spouse = ROOT
						# ROOT = { 
							# if = {
								# limit = {
									# NOT = { any_spouse = { is_main_spouse = no } }	
								# }
								# add_character_modifier = {
									# name = "wedding"
									# duration = 60
								# }
							# }
							# clr_character_flag = keep_lowborn_marriage
						# }
					# }
					# if = {
						# limit = {
							# OR = {
								# NOT = { age = 14 }
								# ROOT = { NOT = { age = 14 } }
							# }	
						# }
						# ROOT = { 
							# remove_character_modifier = wedding
							# add_betrothal = PREV 
						# }
						# add_betrothal = ROOT
					# }
					break = yes
				}
			}	
			if = { 
				limit = { is_ruler = yes }
				random_lover = {
					limit = {
						age = 14
						OR = {
							is_female = no
							NOT = { age = 35 }
						}	
						ai = yes	
						lower_tier_than = ROOT
						can_marry_trigger = yes
						is_pregnant = no
						prisoner = no
						NOT = { trait = celibate }
						NOT = { trait = incapable }
						NOT = { trait = inbred }
						NOT = { same_sex = ROOT }
						NOT = { sibling = ROOT }
						NOT = { is_child_of = ROOT }
						NOT = { is_father = ROOT }
						NOT = { is_mother = ROOT }
						NOT = { liege = { is_close_relative = PREV } }
					}
					ROOT = { 
						set_character_flag = no_wedding_event 
						add_spouse = PREV
						clr_character_flag = no_wedding_event 
					}	
					break = yes					
				}
			}
			if = { #Generate a random as last resort
				limit = { 
					is_ruler = yes
					is_female = no
					age = 40
					war = no					
				}
				set_character_flag = no_wedding_event
				capital_scope = {
					ROOT = {
						wealth = 100 #Dowry
						create_character = {
							random_traits = yes
							dynasty = none
							culture = PREV
							religion = PREV
							female = yes
						}
						new_character = {
							set_character_flag = no_wedding_event
							add_spouse = ROOT
							remove_trait = imbecile
							remove_trait = inbred
							remove_trait = celibate
							remove_trait = infirm
							remove_trait = incapable
							remove_trait = leper
							remove_trait = possessed
							remove_trait = ill
							remove_trait = pneumonic
							remove_trait = maimed
							clr_character_flag = no_wedding_event	
							
							set_character_flag = new_spouse
						}
						#Create minor noble family
						create_character = {
							random_traits = yes
							dynasty = culture
							female = no
							age = 51
							culture = PREV
							religion = PREV
						}
						new_character = {
							wealth = 50
							if = {
								limit = { religion = the_seven }
								knight_character_effect = yes
							}
							random_list = {
								30 = { add_trait = poor_warrior }
								60 = { add_trait = trained_warrior }
								10 = { add_trait = skilled_warrior }
							}
							ROOT = {	
								random_spouse = {
									limit = { has_character_flag = new_spouse }
									set_father = PREVPREV
									dynasty = PREVPREV
								}	
							}
						}
						create_character = {
							random_traits = yes
							dynasty = none
							female = yes
							age = 49
							culture = PREV
							religion = PREV
						}
						new_character = {
							ROOT = {	
								random_spouse = {
									limit = { has_character_flag = new_spouse }
									set_mother = PREVPREV
									father = { add_spouse = PREVPREVPREV }
								}	
							}
						}
						#Random siblings
						random = {
							chance = 75
							create_character = {
								random_traits = yes
								dynasty = none
								female = no
								age = 24
								culture = PREV
								religion = PREV
							}
							new_character = {
								if = {
									limit = { religion = the_seven }
									knight_character_effect = yes
								}
								random_list = {
									30 = { add_trait = poor_warrior }
									60 = { add_trait = trained_warrior }
									10 = { add_trait = skilled_warrior }
								}
								set_character_flag = new_spouse_sibling
							}
						}
						random = {
							chance = 50
							create_character = {
								random_traits = yes
								dynasty = none
								female = yes
								culture = PREV
								religion = PREV
							}
							new_character = {
								set_character_flag = new_spouse_sibling
							}
						}
						random = {
							chance = 33
							create_character = {
								random_traits = yes
								dynasty = none
								female = no
								age = 21
								culture = PREV
								religion = PREV
							}
							new_character = {
								if = {
									limit = { religion = the_seven }
									knight_character_effect = yes
								}
								random_list = {
									30 = { add_trait = poor_warrior }
									60 = { add_trait = trained_warrior }
									10 = { add_trait = skilled_warrior }
								}
								set_character_flag = new_spouse_sibling
							}
						}
						random_spouse = {
							limit = { has_character_flag = new_spouse }
							father = {
								any_courtier = {
									limit = { has_character_flag = new_spouse_sibling }
									set_father = PREV
									dynasty = PREV
								}
							}
							mother = {
								random_courtier = {
									limit = { has_character_flag = new_spouse_sibling }
									set_mother = PREV
									clr_character_flag = new_spouse_sibling
								}
							}
							clr_character_flag = new_spouse
						}	
					}	
				}
				clr_character_flag = no_wedding_event
				break = yes
			}
			break = yes
		}
		##Other courtiers
		if = {
			limit = {
				OR = {
					is_female = no
					is_ruler = yes
					any_claim = { higher_tier_than = COUNT }
				}
			}
			#First try lover
			random_lover = {
				limit = {
					age = 14
					OR = {
						is_female = no
						NOT = { age = 35 }
					}	
					ai = yes	
					OR = {
						lower_tier_than = ROOT
						is_ruler = no
					}	
					can_marry_trigger = yes
					is_pregnant = no
					prisoner = no
					NOT = { trait = celibate }
					NOT = { trait = incapable }
					NOT = { trait = inbred }
					NOT = { same_sex = ROOT }
					NOT = { sibling = ROOT }
					NOT = { is_child_of = ROOT }
					NOT = { is_father = ROOT }
					NOT = { is_mother = ROOT }
					NOT = { liege = { is_close_relative = PREV } }
				}
				if = {
					limit = { 
						ROOT = { is_female = yes } 
						NOT = { any_claim = { higher_tier_than = COUNT } }
						is_primary_heir = no
					}
					add_spouse_matrilineal = ROOT
					break = yes
				}
				add_spouse = ROOT
				break = yes
			}
			#Random courtier
			random_courtier = {
				limit = {
					age = 16
					OR = {
						is_female = no
						NOT = { age = 30 }
					}	
					ai = yes	
					can_marry_trigger = yes
					is_pregnant = no
					prisoner = no
					NOT = { trait = celibate }
					NOT = { trait = incapable }
					NOT = { trait = inbred }
					NOT = { trait = infirm }
					NOT = { same_sex = ROOT }
					NOT = { is_close_relative = ROOT }
					NOT = { liege = { is_close_relative = PREV } }
					NOT = { num_of_claims = 1 }
					is_ruler = no
					is_primary_heir = no
					opinion = { who = ROOT value = 0 }
					reverse_opinion = { who = ROOT value = 0 }
				}
				if = {
					limit = { ROOT = { is_female = no } }
					add_spouse = ROOT
					break = yes
				}	
				if = {
					limit = { ROOT = { is_female = yes } }
					add_spouse_matrilineal = ROOT
					break = yes
				}
			}
			if = {
				limit = { is_female = no }
				set_character_flag = no_wedding_event
				if = {
					limit = { is_ruler = no }
					liege = {
						capital_scope = {
							owner = {
								create_character = {
									random_traits = yes
									dynasty = none
									female = yes
									age = 21
									culture = PREV
									religion = PREV
								}
								new_character = {
									set_character_flag = no_wedding_event
									add_spouse = ROOT
									remove_trait = celibate
									remove_trait = infirm
									remove_trait = incapable
									clr_character_flag = no_wedding_event
								}
								ROOT = { clr_character_flag = no_wedding_event }
								break = yes	
							}
						}				
					}
				}	
				if = {
					limit = { is_ruler = yes }
					capital_scope = {
						ROOT = {
							create_character = {
								random_traits = yes
								dynasty = none
								female = yes
								age = 21
								culture = PREV
								religion = PREV
							}
							new_character = {
								set_character_flag = no_wedding_event
								add_spouse = ROOT
								remove_trait = celibate
								remove_trait = infirm
								remove_trait = incapable
								clr_character_flag = no_wedding_event
							}
							clr_character_flag = no_wedding_event
							break = yes	
						}
					}		
				}
				create_character = {
					random_traits = yes
					dynasty = none
					female = yes
					age = 21
					culture = ROOT
					religion = ROOT
				}
				new_character = {
					set_character_flag = no_wedding_event
					add_spouse = ROOT
					remove_trait = celibate
					remove_trait = infirm
					remove_trait = incapable
					clr_character_flag = no_wedding_event
				}
				clr_character_flag = no_wedding_event
				break = yes
			}	
			if = {
				limit = { is_female = yes }
				set_character_flag = no_wedding_event
				if = {
					limit = { is_ruler = no }
					liege = {
						capital_scope = {
							owner = {
								create_character = {
									random_traits = yes
									dynasty = none
									female = no
									culture = PREV
									religion = PREV
								}
								new_character = {
									set_character_flag = no_wedding_event
									add_spouse_matrilineal = ROOT
									remove_trait = celibate
									remove_trait = infirm
									remove_trait = incapable
									if = {
										limit = { religion = the_seven }
										knight_character_effect = yes
									}
									random_list = {
										30 = { add_trait = poor_warrior }
										60 = { add_trait = trained_warrior }
										10 = { add_trait = skilled_warrior }
									}
									clr_character_flag = no_wedding_event
								}
								ROOT = { clr_character_flag = no_wedding_event }
								break = yes	
							}
						}				
					}
				}	
				if = {
					limit = { is_ruler = yes }
					capital_scope = {
						ROOT = {
							create_character = {
								random_traits = yes
								dynasty = none
								female = no
								culture = PREV
								religion = PREV
							}
							new_character = {
								set_character_flag = no_wedding_event
								add_spouse_matrilineal = ROOT
								remove_trait = celibate
								remove_trait = infirm
								remove_trait = incapable
								if = {
									limit = { religion = the_seven }
									knight_character_effect = yes
								}
								random_list = {
									30 = { add_trait = poor_warrior }
									60 = { add_trait = trained_warrior }
									10 = { add_trait = skilled_warrior }
								}
								clr_character_flag = no_wedding_event
							}
							clr_character_flag = no_wedding_event
							break = yes	
						}
					}		
				}
				create_character = {
					random_traits = yes
					dynasty = none
					female = no
					culture = ROOT
					religion = ROOT
				}
				new_character = {
					set_character_flag = no_wedding_event
					add_spouse_matrilineal = ROOT
					remove_trait = celibate
					remove_trait = infirm
					remove_trait = incapable
					if = {
						limit = { religion = the_seven }
						knight_character_effect = yes
					}
					random_list = {
						30 = { add_trait = poor_warrior }
						60 = { add_trait = trained_warrior }
						10 = { add_trait = skilled_warrior }
					}
					clr_character_flag = no_wedding_event
				}
				clr_character_flag = no_wedding_event
			}
		}	
	}
	option = {
		name = "EVTOPTAmaintenance.6"
	}	
}
#AI gives honorary title
character_event = {
	id = maintenance.7
	picture = "GFX_evt_council"
	
	is_triggered_only = yes
	only_playable = yes
	ai = yes
	
	trigger = {
		higher_tier_than = COUNT
		any_vassal = {
			has_ambition = obj_gain_honorary_title
			higher_tier_than = BARON
			reverse_opinion = { who = ROOT value = -50 }
		}
	}

	immediate = {
		if = {
			limit = { 
				trait = lunatic 
				has_regent = no
				trait = dragon_rider
			}
			random_friend = {
				limit = { trait = dragon }
				random = {
					chance = 10
					give_minor_title = title_appointed_regent
					ROOT = { 
						character_event = { id = regency.2 } 
						any_realm_lord = {
							limit = { 
								ai = no 
								NOT = { character = ROOT }
							}
							letter_event = { id = regency.3 } 
						}
					}
				}	
			}
		}
		if = { #Westerosi
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
				}
				NOT = { culture = moon_clansman }
			}
			if = {
				limit = {
					higher_tier_than = DUKE
					NOT = { has_assigned_minor_title = title_keeper_of_swans }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_keeper_of_swans
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_keeper_of_swans
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_master_of_the_hunt }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_master_of_the_hunt
						
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_master_of_the_hunt
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_high_almoner }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_high_almoner
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_high_almoner
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}			
		}
		if = { #master of Horse
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
					culture_group = dothraki_group
				}
				NOT = { culture = moon_clansman }
				NOT = { has_assigned_minor_title = title_master_of_the_horse }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_master_of_the_horse
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_master_of_the_horse
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Cupbearer
			limit = {
				is_republic = no
				is_theocracy = no
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					culture_group = iron_isles_culture
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
				}
				NOT = { culture = moon_clansman }
				NOT = { has_assigned_minor_title = title_cupbearer }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_cupbearer
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_cupbearer
				set_character_flag = minor_title_given
				if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
			}
		}
		if = { #Senschal
			limit = {
				higher_tier_than = DUKE
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}	
					culture_group = dothraki_group
					culture = jogos_nhai
					culture_group = nghai_group
				}
				is_nomadic = no
				is_tribal = no
				NOT = { has_assigned_minor_title = title_seneschal }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_seneschal
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_seneschal
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Paramount Knight
			limit = {
				higher_tier_than = DUKE
				independent = yes
				religion = the_seven
				OR = { #Reach has The Order of the Green Hand
					NOT = { tier = EMPEROR }
					NOT = {
						OR = {
							AND = {
								capital_scope = { region = world_reach }
								culture_group = andal
							}
							dynasty = 1254 #Gardener
							has_landed_title = e_reach
						}
					}	
				}
				NOT = { has_assigned_minor_title = title_paramount_knight }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_paramount_knight
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_paramount_knight
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Food taster
			limit = {
				OR = {
					is_patrician = yes
					higher_tier_than = DUKE
				}	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = asshai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
					culture_group = dothraki_group
					culture = jogos_nhai
					culture_group = nghai_group
				}
				is_nomadic = no
				is_tribal = no
				NOT = { has_assigned_minor_title = title_food_taster }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_food_taster
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_food_taster
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}	
		if = { #Court Musician
			limit = {
				NOT = { trait = nightswatch }
				is_merchant_republic = no
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = yi_ti_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_court_musician }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_court_musician
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_court_musician
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Court poet
			limit = {
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = yi_ti_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_court_poet }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_court_poet
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_court_poet
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}	
		if = { #Chief architect
			limit = {
				NOT = { trait = nightswatch }
				is_merchant_republic = no
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_chief_architect }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_chief_architect
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_chief_architect
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}	
		if = { #Republics
			limit = {
				is_merchant_republic = yes
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_state_inquisitor }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_state_inquisitor
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_state_inquisitor
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}
			if = {
				limit = {
					NOT = { has_dlc = "Zeus" }
					# NOT = {
						# OR = {
							# culture_group = andal
							# culture_group = dornish
							# culture_group = first_men
							# culture_group = hyrkoon_group
							# culture_group = ibbenese
							# culture_group = sarnor_group
							# AND = {
								# culture_group = valyrian
								# capital_scope = { region = world_westeros }
							# }
						# }
					# }	
					NOT = { has_assigned_minor_title = title_high_admiral_B }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_high_admiral_B
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_high_admiral_B
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_high_judge }
				}
				random_vassal = {
					limit = {
						has_ambition = obj_gain_honorary_title
						higher_tier_than = BARON
						reverse_opinion = { who = ROOT value = -50 }
						can_hold_title = title_high_judge
						NOT = { has_character_flag = minor_title_given }
					}
					give_minor_title = title_high_judge
					set_character_flag = minor_title_given
					if = {
						limit = { ai = no }
						letter_event = { id = maintenance.8 } 
					}
				}
			}
		}
		if = { #Lawspeaker
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_lawspeaker }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_lawspeaker
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_lawspeaker
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Champion
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_champion }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_champion
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_champion
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Master of the Blade
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_blade }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_master_of_the_blade
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_master_of_the_blade
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Master of the Bow
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture_group = summer_islands
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_bow }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_master_of_the_bow
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_master_of_the_bow
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #Venerable elder
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = free_folk
					culture_group = summer_islands
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_venerable_elder }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_venerable_elder
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_venerable_elder
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #master of elephants
			limit = {
				OR = {
					is_feudal = yes
					is_tribal = yes
				}
				higher_tier_than = DUKE
				OR = {
					culture_group = moraqi_group
					culture_group = yi_ti_group
					culture = volantene
					culture = eastern_valyrian
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = jade_islands_group
					AND = {
						culture = high_valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_royal_elephants }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_master_of_the_royal_elephants
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_master_of_the_royal_elephants
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		if = { #royal builder
			limit = {
				OR = {
					is_tribal = yes
					is_feudal = yes
				}	
				higher_tier_than = DUKE
				culture_group = yi_ti_group
				NOT = { has_assigned_minor_title = title_royal_builder }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_royal_builder
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_royal_builder
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		# if = { #Master of Ships
			# limit = {
				# NOT = { has_dlc = "Zeus" }
				# AND = {
					# OR = {
						# is_merchant_republic = yes
						# AND = {
							# independent = yes
							# higher_tier_than = DUKE
							# capital_scope = { port = yes }
						# }	
					# }	
					# OR = {
						# culture_group = andal
						# culture_group = dornish
						# culture_group = first_men
						# culture_group = hyrkoon_group
						# culture_group = ibbenese
						# culture_group = sarnor_group
						# AND = {
							# culture_group = valyrian
							# capital_scope = { region = world_westeros }
						# }
					# }
				# }
				# NOT = { has_assigned_minor_title = title_master_of_ships_B }
			# }
			# random_vassal = {
				# limit = {
					# has_ambition = obj_gain_honorary_title
					# higher_tier_than = BARON
					# reverse_opinion = { who = ROOT value = -50 }
					# can_hold_title = title_master_of_ships_B
					# NOT = { has_character_flag = minor_title_given }
				# }
				# give_minor_title = title_master_of_ships_B
				# set_character_flag = minor_title_given
				# if = {
					# limit = { ai = no }
					# letter_event = { id = maintenance.8 } 
				# }
			# }
		# }
		if = { #Small council
			limit = {
				NOT = { has_dlc = "Zeus" }
				has_landed_title = e_iron_throne
				NOT = { has_assigned_minor_title = { title = title_small_council_advisor count = 3 } }
			}
			random_vassal = {
				limit = {
					has_ambition = obj_gain_honorary_title
					higher_tier_than = BARON
					reverse_opinion = { who = ROOT value = -50 }
					can_hold_title = title_small_council_advisor
					NOT = { has_character_flag = minor_title_given }
				}
				give_minor_title = title_small_council_advisor
				set_character_flag = minor_title_given
				if = {
					limit = { ai = no }
					letter_event = { id = maintenance.8 } 
				}
			}
		}
		any_vassal = { clr_character_flag = minor_title_given }
	}

	option = {
		name = "OK"
	}
}
letter_event = { #Inform player given title
	id = maintenance.8

	is_triggered_only = yes
	
	desc = {
		text = EVTDESC30036A
		trigger = { has_minor_title = title_keeper_of_swans }
	}
	desc = {
		text = EVTDESC30036B
		trigger = { has_minor_title = title_master_of_the_horse }
	}
	desc = {
		text = EVTDESC30036C
		trigger = { has_minor_title = title_master_of_the_hunt }
	}
	desc = {
		text = EVTDESC30036D
		trigger = { has_minor_title = title_high_almoner }
	}
	desc = {
		text = EVTDESC30036E
		trigger = { has_minor_title = title_cupbearer }
	}
	desc = {
		text = EVTDESC30036F
		trigger = { has_minor_title = title_seneschal }
	}
	desc = {
		text = EVTDESC30036G
		trigger = { has_minor_title = title_paramount_knight }
	}
	desc = {
		text = EVTDESC30036H
		trigger = { has_minor_title = title_food_taster }
	}
	desc = {
		text = EVTDESC30036I
		trigger = { has_minor_title = title_court_musician }
	}
	desc = {
		text = EVTDESC30036J
		trigger = { has_minor_title = title_court_poet }
	}
	desc = {
		text = EVTDESC30036K
		trigger = { has_minor_title = title_chief_architect }
	}
	desc = {
		text = EVTDESC30036L
		trigger = { has_minor_title = title_state_inquisitor }
	}
	desc = {
		text = EVTDESC30036M
		trigger = { has_minor_title = title_high_admiral_B }
	}
	desc = {
		text = EVTDESC30036N
		trigger = { has_minor_title = title_high_judge }
	}
	desc = {
		text = EVTDESC30036O
		trigger = { has_minor_title = title_lawspeaker }
	}
	desc = {
		text = EVTDESC30036P
		trigger = { has_minor_title = title_champion }
	}
	desc = {
		text = EVTDESC30036Q
		trigger = { has_minor_title = title_master_of_the_blade }
	}
	desc = {
		text = EVTDESC30036R
		trigger = { has_minor_title = title_master_of_the_bow }
	}
	desc = {
		text = EVTDESC30036S
		trigger = { has_minor_title = title_venerable_elder }
	}
	desc = {
		text = EVTDESC30036T
		trigger = { has_minor_title = title_master_of_the_royal_elephants }
	}
	desc = {
		text = EVTDESC30036Y
		trigger = { has_minor_title = title_royal_builder }
	}
	# desc = {
		# text = EVTDESC30036V
		# trigger = { has_minor_title = title_master_of_ships_B }
	# }
	desc = {
		text = EVTDESC30036W
		trigger = { has_minor_title = title_small_council_advisor }
	}

	option = {
		name = "EVTOPTAmaintenance.8"
		if = {
			limit = {
				has_minor_title = title_appointed_regent
				trait = dragon
			}
			FROM = { character_event = { id = regency.1 } }
		}
	}
}	
#Remove just
character_event = {
	id = maintenance.9
	is_triggered_only = yes
	
	trigger = {
		trait = just
	}
	
	immediate = {
		remove_trait = just
	}
		
	desc = "EVTDESC190074"

	option = {
		name = "EVTOPTA190074"		
		tooltip = { remove_trait = just }
	}
}

# #Remove honest
# character_event = {
	# id = maintenance.10
	# is_triggered_only = yes
	
	# trigger = {
		# trait = honest
	# }
	
	# immediate = {
		# remove_trait = honest
	# }
		
	# desc = "EVTDESCmaintenance.10"

	# option = {
		# name = "EVTOPTAmaintenance.10"		
		# tooltip = { remove_trait = honest }
	# }
# }

# #Remove kind
# character_event = {
	# id = maintenance.11
	# is_triggered_only = yes
	
	# trigger = {
		# trait = kind
	# }
	
	# immediate = {
		# remove_trait = kind
	# }
		
	# desc = "EVTDESCmaintenance.11"

	# option = {
		# name = "EVTOPTAmaintenance.11"		
		# tooltip = { remove_trait = kind }
	# }
# }

#AI plot check
character_event = {
	id = maintenance.12
	
	is_triggered_only = yes
	hide_from = yes
	is_part_of_plot = yes
	ai = yes
	
	trigger = {			
		has_plot = yes
		OR = {
			is_ruler = yes
			liege = { ai = no }
			has_plot = plot_kill_character
			
		}		
		NOT = { has_plot = plot_escape_slavery }
		NOT = { has_character_flag = plot_check }
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		set_character_flag = plot_check
	}
}

character_event = {
	id = maintenance.13
	
	is_triggered_only = yes
	hide_from = yes
	ai = yes
	is_part_of_plot = yes
	
	trigger = {	
		has_plot = yes
		had_character_flag = { flag = plot_check days = 365 }
		OR = {
			NOT = { num_of_plot_backers = 1 }
			NOT = { plot_power = 0.25 }
			AND = {
				had_character_flag = { flag = plot_check days = 1095 }
				NOT = { num_of_plot_backers = 2 }
				NOT = { plot_power = 0.5 }
			}
		}
	}

	desc = "AI_EVENT"

	option = {
		set_character_flag = abort_plot
		cancel_plot = yes	
	}
}

#AI ambition check
character_event = {
	id = maintenance.14
	
	is_triggered_only = yes
	hide_from = yes
	min_age = 16
	capable_only = yes
	ai = yes
	
	trigger = {	
		OR = {
			is_ruler = yes
			liege = { ai = no }
		}
		has_ambition = yes	
		NOT = { has_character_flag = obj_check }
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		set_character_flag = obj_check
	}
}

character_event = {
	id = maintenance.15
	
	is_triggered_only = yes
	hide_from = yes
	min_age = 16
	capable_only = yes
	ai = yes
	
	trigger = {
		had_character_flag = {
			flag = obj_check
			days = 3650
		}
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		set_character_flag = abort_obj
	}
}

#AI selects a bodyguard
character_event = {
	id = maintenance.16
	
	is_triggered_only = yes
	only_playable = yes
	ai = yes
	
	trigger = {	
		NOT = { has_landed_title = e_iron_throne }
		NOT = { culture_group = unoccupied_group }
		NOT = { culture = dothraki } #Uses Bloodriders
		NOT = {
			any_courtier = {
				liege = { character = ROOT }
				has_minor_title = title_bodyguard
				count = 3
			}
		}
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		random_courtier = {
			limit = {
				trait = master_warrior
				is_ruler = no
				is_adult = yes
				OR = {
					AND = {
						NOT = { is_voter = yes }
						is_councillor = no
					}	
					has_job_title = job_marshal
				}
				liege = { character = ROOT }
				NOT = { is_close_relative = ROOT }
				NOT = { has_minor_title = title_bodyguard }
				NOT = { trait = incapable }
				NOT = { is_crippled_trigger = yes }
				NOT = { trait = infirm }
				NOT = { trait = dragon }				
			}
			give_minor_title = title_bodyguard
			break = yes
		}
		random_courtier = {
			limit = {
				trait = skilled_warrior
				is_ruler = no
				is_adult = yes
				OR = {
					AND = {
						NOT = { is_voter = yes }
						is_councillor = no
					}	
					has_job_title = job_marshal
				}
				liege = { character = ROOT }
				NOT = { is_close_relative = ROOT }
				NOT = { has_minor_title = title_bodyguard }
				NOT = { trait = incapable }
				NOT = { is_crippled_trigger = yes }
				NOT = { trait = infirm }
				NOT = { trait = dragon }				
			}
			give_minor_title = title_bodyguard
			break = yes
		}
		random_courtier = {
			limit = {
				trait = trained_warrior
				is_ruler = no
				is_adult = yes
				OR = {
					AND = {
						NOT = { is_voter = yes }
						is_councillor = no
					}	
					has_job_title = job_marshal
				}
				liege = { character = ROOT }
				NOT = { is_close_relative = ROOT }
				NOT = { has_minor_title = title_bodyguard }
				NOT = { trait = incapable }
				NOT = { is_crippled_trigger = yes }
				NOT = { trait = infirm }
				NOT = { trait = dragon }				
			}
			give_minor_title = title_bodyguard
			break = yes
		}
	}
}
#AI selects a commander
character_event = {
	id = maintenance.17
	
	is_triggered_only = yes
	only_playable = yes

	trigger = {
		ai = yes
		OR = {
			AND = {
				has_landed_title = c_kings_landing
				b_kings_landing = { has_title_flag = military_command }
				NOT = { any_vassal = { has_minor_title = title_commander_gold_cloaks } }
			}
			AND = {
				has_landed_title = c_oldtown
				NOT = { any_vassal = { has_minor_title = title_commander_city_watch_oldtown } }
			}
			AND = {
				has_landed_title = d_the_giants_lance
				NOT = { any_vassal = { has_minor_title = title_knight_of_the_bloody_gate } }
			}
			AND = {
				has_landed_title = c_lannisport
				NOT = { any_vassal = { has_minor_title = title_commander_city_watch_lannisport } }
			}			
		}
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		random_courtier = {
			limit = {
				is_ruler = no
				is_female = no
				age = 16
				NOT = { age = 50 }
				martial = 12
				NOT = { trait = incapable }
				NOT = { is_crippled_trigger = yes }
				NOT = { trait = infirm }
				NOT = { trait = imbecile }
				NOT = { trait = dragon }
				NOT = { trait = white_walker }
				NOT = { trait = maester }
				NOT = { trait = archmaester }
				NOT = { trait = septon }
				NOT = { trait = red_priest }
				NOT = { trait = kingsguard }
				NOT = { is_close_relative = ROOT }
				is_primary_heir = no
				reverse_opinion = { who = ROOT value = 0 }
				religion = ROOT
			}
			if = {
				limit = {
					ROOT = {
						has_landed_title = c_kings_landing
						NOT = { any_vassal = { has_minor_title = title_commander_gold_cloaks } }
					}
				}
				give_minor_title = title_commander_gold_cloaks
				b_kings_landing = { 
					succession = appointment
					grant_title = PREV 
				}
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}
			}	
			if = {
				limit = {
					NOT = { demesne_size = 1 }
					ROOT = {
						has_landed_title = c_oldtown
						NOT = { any_vassal = { has_minor_title = title_commander_city_watch_oldtown } }
					}
				}
				give_minor_title = title_commander_city_watch_oldtown
				b_oldtown = {
					succession = appointment
					grant_title = PREV 
				}
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}
			}
			if = {
				limit = {
					NOT = { demesne_size = 1 }
					ROOT = {
						has_landed_title = d_the_giants_lance
						NOT = { any_vassal = { has_minor_title = title_knight_of_the_bloody_gate } }
						OR = {
							has_landed_title = c_bloody_gate
							any_vassal = {
								has_landed_title = c_bloody_gate
							}
						}	
						any_demesne_title = {
							tier = COUNT
							NOT = { title = c_bloody_gate }
						}
					}
				}
				give_minor_title = title_knight_of_the_bloody_gate
				c_bloody_gate = { 
					succession = appointment
					grant_title = PREV 
				}
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}
			}
			if = {
				limit = {
					NOT = { demesne_size = 1 }
					ROOT = {
						has_landed_title = c_lannisport
						NOT = { any_vassal = { has_minor_title = title_commander_city_watch_lannisport } }
					}
				}
				give_minor_title = title_commander_city_watch_lannisport
				b_lannisportone = {
					succession = appointment
					grant_title = PREV 
				}
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}
			}
		}
	}
}
#AI fires commander
character_event = {
	id = maintenance.18
	
	is_triggered_only = yes
	only_playable = yes

	trigger = {
		ai = yes
		OR = {
			AND = {
				has_landed_title = c_kings_landing
				any_vassal = { has_minor_title = title_commander_gold_cloaks }
			}
			AND = {
				has_landed_title = c_oldtown
				any_vassal = { has_minor_title = title_commander_city_watch_oldtown }
			}
			AND = {
				has_landed_title = d_the_giants_lance
				any_vassal = { has_minor_title = title_knight_of_the_bloody_gate }
			}
			AND = {
				has_landed_title = c_lannisport
				any_vassal = { has_minor_title = title_commander_city_watch_lannisport }
			}
		}
	}

	desc = "AI_EVENT"

	option = {
		name = "OK"
		ai_chance = { factor = 25 }
		random_vassal = {
			limit = {
				OR = {
					has_minor_title = title_commander_gold_cloaks
					has_minor_title = title_commander_city_watch_oldtown
					has_minor_title = title_knight_of_the_bloody_gate 
					has_minor_title = title_commander_city_watch_lannisport 
				}	
				OR = {
					trait = incapable
					NOT = { reverse_opinion = { who = ROOT value = -20 } }
					NOT = { martial = 10 }
					age = 60
				}
			}	
			if = {
				limit = {
					has_minor_title = title_commander_gold_cloaks
					ROOT = { has_landed_title = c_kings_landing }
				}
				remove_title = title_commander_gold_cloaks
				hidden_tooltip = { b_kings_landing = { gain_title = ROOT } }
			}
			if = {
				limit = {
					has_minor_title = title_commander_city_watch_oldtown
					ROOT = { has_landed_title = c_oldtown }
				}
				remove_title = title_commander_city_watch_oldtown
				hidden_tooltip = { b_oldtown  = { gain_title = ROOT } }
			}
			if = {
				limit = {		
					has_minor_title = title_knight_of_the_bloody_gate 
					ROOT = { has_landed_title = d_the_giants_lance }
				}
				remove_title = title_knight_of_the_bloody_gate
				hidden_tooltip = { c_bloody_gate  = { gain_title = ROOT } }
			}
			if = {
				limit = {		
					has_minor_title = title_commander_city_watch_lannisport 
					ROOT = { has_landed_title = c_lannisport }
				}
				remove_title = title_commander_city_watch_lannisport 
				hidden_tooltip = { b_lannisportone  = { gain_title = ROOT } }
			}
			opinion = {
				modifier = opinion_fired_from_office
				who = ROOT
				years = 10
			}
			hidden_tooltip = { 
				move_character = ROOT
			}
		}
	}
	
	option = {
		name = "OK"
		ai_chance = { factor = 75 }
	}	
}
#Check for CK2 version
long_character_event = {
	id = maintenance.19
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	ai = no
	
	desc = {
		text = "EVTDESCmaintenance.19"
		trigger = {
			OR = {
				is_hard_to_convert = yes
				is_hard_to_convert = no
			}
		}
	}
	desc = { #defintely not using the right CK2 version
		text = "EVTDESCmaintenance.19B"
		trigger = {
			NOR = {
				is_hard_to_convert = yes
				is_hard_to_convert = no
			}
		}
	}
	
	trigger = {
		supported_checksum = no
		has_game_rule = {
			name = ck2_version_warning
			value = on
		}
	}

	option = {
		name = "OK"
	}
}
#King vassalised in a war, organise titles
character_event = {
	id = maintenance.20
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		any_independent_ruler = { #Re-vassalise any lords split via mega-war
			limit = {	
				NOT = { primary_title = { NOT = { check_variable = { which = "de_facto_empire" value = 1 } } } }
				has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_independence } }
			}
			set_defacto_liege = ROOT
			remove_opinion = { who = ROOT modifier = opinion_de_facto_liege }
		}
		if = { #If ROOT is a Westerosi King destroy any Westerosi Lord Paramountcies
			limit = {
				NOT = { has_character_flag = other_claim_CB_war }
				any_demesne_title = {
					tier = EMPEROR 
					OR = {
						capital_scope = { region = world_westeros }
						title = e_iron_isles #These titles dont have capitals
						title = e_riverlands
					}
				}
			}
			any_demesne_title = {
				limit = {
					tier = KING
					controls_religion = no
					is_landless_type_title = no				
					OR = {
						capital_scope = { region = world_westeros }
						title = k_crownlands #These titles dont have capitals
						title = k_riverlands
						title = k_iron_isles
					}
				}
				destroy_landed_title = ROOT
				if = { #Add to Iron Throne dejure realm
					limit = {
						is_titular = no
						NOT = { title = k_nightswatch }
						NOT = { title = k_beyond_wall }
						FROM = { has_landed_title = e_iron_throne }
					}
					de_jure_liege = e_iron_throne
				}
			}
			any_war = { #end all revolts
				if = { 
					limit = { 
						defender = { character = ROOT }
						attacker = { 
							liege_before_war = { character = ROOT }
							NOT = { character = ROOT }
						} 
					}
					end_war = invalid
				}
			}
		}
		#Grant ROOT the equivalent LP to their Kingdom
		set_character_flag = changing_westerosi_kingdom_tier #to stop other maintenance triggering
		random_demesne_title = {
			limit = {
				tier = EMPEROR
				OR = {
					ROOT = {
						primary_title = { title = PREVPREV }
						NOT = { has_character_flag = other_claim_CB_war }
					}
					AND = { #If other claim war only the target kingdom is lost
						has_title_flag = other_claim_kingdom_target
						ROOT = { has_character_flag = other_claim_CB_war }
					}
				}
			}
			if = { 	
				limit = { title = e_north }
				k_north = { grant_title = ROOT copy_title_laws = e_north }					
			}
			if = { 	
				limit = { title = e_riverlands }
				k_riverlands  = { grant_title = ROOT copy_title_laws = e_riverlands }
			}
			if = { 	
				limit = { title = e_vale }
				k_vale = { grant_title = ROOT copy_title_laws = e_vale }
			}
			if = { 	
				limit = { title = e_westerlands }
				k_westerlands = { grant_title = ROOT copy_title_laws = e_westerlands }
			}
			if = { 	
				limit = { title = e_reach }
				k_reach = { grant_title = ROOT copy_title_laws = e_reach }
			}
			if = { 	
				limit = { title = e_stormlands }
				k_stormlands = { grant_title = ROOT copy_title_laws = e_stormlands }
			}
			if = { 	
				limit = { title = e_dorne }
				k_dorne = { grant_title = ROOT copy_title_laws = e_dorne }
			}
			if = { 	
				limit = { title = e_iron_isles }
				k_iron_isles = { grant_title = ROOT copy_title_laws = e_iron_isles }
			}
		}
		
		any_vassal = { #transfer any vassals not in ROOT's dejure realm to FROM
			limit = {
				NOT = { tier = KING }
				NOT = { 
					capital_scope = { 
						OR = {
							kingdom = { holder_scope = { character = ROOT } } 
							empire = { holder_scope = { character = ROOT } } 
						}	
					} 
				}
			}
			set_defacto_liege = FROM
			opinion = {
				modifier = opinion_subjugated_AGOT
				who = FROM
				years = 10
			}
		}
		#If FROM is iron Throne mark which dejure realms need to be transfered
		if = {
			limit = { 
				FROM = { has_landed_title = e_iron_throne } 
				NOT = { has_character_flag = other_claim_CB_war }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_north 
						any_vassal = { has_landed_title = k_north }
					}	
				}		
				FROM = { set_character_flag = dejure_north }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_riverlands
						any_vassal = { has_landed_title = k_riverlands }
					}	
				}		
				FROM = { set_character_flag = dejure_riverlands }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_vale
						any_vassal = { has_landed_title = k_vale }
					}	
				}		
				FROM = { set_character_flag = dejure_vale }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_westerlands
						any_vassal = { has_landed_title = k_westerlands }
					}	
				}		
				FROM = { set_character_flag = dejure_westerlands }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_reach 
						any_vassal = { has_landed_title = k_reach }
					}	
				}		
				FROM = { set_character_flag = dejure_reach }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_stormlands 
						any_vassal = { has_landed_title = k_stormlands }
					}	
				}		
				FROM = { set_character_flag = dejure_stormlands }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_dorne 
						any_vassal = { has_landed_title = k_dorne }
					}	
				}		
				FROM = { set_character_flag = dejure_dorne }
			}
			if = { 	
				limit = { 
					OR = {
						has_landed_title = e_iron_isles 
						any_vassal = { has_landed_title = k_iron_isles }
					}	
				}		
				FROM = { set_character_flag = dejure_iron_isles }
			}
			#Destroy any Westerosi Kingdoms
			any_demesne_title = { 
				limit = { 
					tier = EMPEROR 
					OR = {
						capital_scope = { region = world_westeros }
						title = e_iron_isles #These titles dont have capitals
						title = e_riverlands
					}
				}
				ROOT = { #make sure all vassals are transferred before destroying
					any_vassal = {
						limit = { de_facto_liege_title = PREVPREV }
						set_defacto_liege = FROM
						any_demesne_title = { 
							limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
							set_variable = { which = "de_facto_empire" value = 1 } 
						}
					}
				}
				destroy_landed_title = ROOT
				#Make sure any vassals have the correct defacto empire law marker
				any_independent_ruler = {
					limit = { 
						NOT = { tier = EMPEROR }
						primary_title = { 
							is_variable_equal = { which = "de_facto_empire" which = PREVPREV } 
							check_variable = { which = "de_facto_empire" value = 0.9 }
						}
					}
					any_demesne_title = { 
						limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
						set_variable = { which = "de_facto_empire" value = 1 } 
					}
				}			
			}
			any_demesne_title = { 
				limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
				set_variable = { which = "de_facto_empire" value = 1 } 
			}
			any_realm_lord = { 
				any_demesne_title = { 
					limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
					set_variable = { which = "de_facto_empire" value = 1 } 
				}
			}
		}
		if = { #Special other claim war effects
			limit = { has_character_flag = other_claim_CB_war }
			random_demesne_title = { 
				limit = { 
					tier = EMPEROR 
					has_title_flag = other_claim_kingdom_target
				}
				destroy_landed_title = ROOT
				#Make sure any vassals have the correct defacto empire law marker
				any_independent_ruler = {
					limit = { 
						NOT = { tier = EMPEROR }
						primary_title = { 
							is_variable_equal = { which = "de_facto_empire" which = PREVPREV } 
							check_variable = { which = "de_facto_empire" value = 0.9 }
						}
					}
					any_demesne_title = { 
						limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
						set_variable = { which = "de_facto_empire" value = 1 } 
					}
					any_demesne_title = { 
						limit = { 
							tier = KING
							dejure_liege_title = { title = PREVPREVPREV }
						}
						de_jure_liege = e_iron_throne
					}
				}			
				clr_title_flag = other_claim_kingdom_target
				if = { 
					limit = {
						ROOT = { 
							NOT = { demesne_size = 2 } 
							FROM = { NOT = { demesne_size = 1 } }
							OR = { #Must be related in some way
								dynasty = FROM
								is_close_relative = FROM
								capital_scope = { county = { FROM = { has_claim = PREV } } }
							}
						}					
					}
					add_pressed_claim = ROOT
					ROOT = {
						abdicate_to = FROM
						opinion = { who = FROM modifier = opinion_usurped_title }					
						FROM = { 
							set_character_flag = abdication_usurp 
							any_demesne_title = { 
								limit = { 
									tier = KING 
									OR = {
										capital_scope = { region = world_westeros }
										title = k_iron_isles #These titles dont have capitals
										title = k_riverlands
									}
								}
								de_jure_liege = e_iron_throne
							}	
						}
					}
				}
				if = { 
					limit = {
						FROM = { NOT = { has_character_flag = abdication_usurp } }
					}
					if = { 	
						limit = { title = e_north }
						k_north = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim }  de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_riverlands }
						k_riverlands = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_vale }
						k_vale = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_westerlands }
						k_westerlands = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_reach }
						k_reach = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_stormlands }
						k_stormlands = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_dorne }
						k_dorne = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
					if = { 	
						limit = { title = e_iron_isles }
						k_iron_isles = { usurp_title_plus_barony_if_unlanded = { target = FROM type = claim } de_jure_liege = e_iron_throne }
					}
				}	
				FROM = { clr_character_flag = abdication_usurp }
			}
		}
		if = {
			limit = { NOT = { has_character_flag = other_claim_CB_war } }
			if = { #If Triarchy of The Three Daughters then disband
				limit = {
					government = alliance_government
				}
				any_vassal = { 
					limit = { NOT = { tier = BARON } }
					set_defacto_liege = FROM 
				}
				any_demesne_title = { 
					limit = { has_title_flag = alliance_government }
					clr_title_flag = alliance_government
					destroy_landed_title = ROOT 
					hidden_tooltip = {
						if = {
							limit = { title = e_three_daughters }
							any_direct_de_jure_vassal_title = {
								de_jure_liege = e_new_valyria
							}
						}	
					}
				}
			}
			any_demesne_title = {
				limit = { 
					tier = EMPEROR 
					OR = {
						capital_scope = { region = world_westeros }
						title = e_iron_isles #These titles dont have capitals
						title = e_riverlands
					}
				}
				destroy_landed_title = ROOT
			}	
			any_demesne_title = { #Usurp any Non-Westerosi kingdoms
				limit = { tier = EMPEROR }
				usurp_title = { target = FROM type = claim }
			}
			opinion = {
				modifier = opinion_subjugated_AGOT
				who = FROM
				years = 10
			}
			FROM = {
				if = {
					limit = { NOT = { trait = civil_war } } 
					ROOT = { set_defacto_liege = ROOT_FROM }
				}
				if = {
					limit = { trait = civil_war } 
					set_mega_war_empire_variable_ROOT_effect = yes
					ROOT = {
						remove_trait = rebel_leader
						clr_character_flag = rebel_leader
						clr_character_flag = neutral
						clr_character_flag = against_king 
						clr_character_flag = supporting_king 
						set_character_flag = neutral
						any_vassal = { 
							clr_character_flag = against_king 
							clr_character_flag = supporting_king
							set_character_flag = neutral 
						}
					}
				}
			}	
		}	
		clr_character_flag = independant
		clr_character_flag = other_claim_CB_war
		#Liege Loans are lost
		clr_character_flag = mega_war_liege_loan
		remove_character_modifier = liege_loan
		clr_character_flag = liege_loan_75
		clr_character_flag = liege_loan_150
		clr_character_flag = liege_loan_300
		clr_character_flag = liege_loan_500
		
		clr_character_flag = changing_westerosi_kingdom_tier
	}

	option = {
		name = "OK"
	}
}
#Defended invasion, retake dejure vassals (sets FROMFROM scope for maintenance.21)
character_event = {
	id = maintenance.2199
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		character_event = { id = maintenance.21 }
	}
	
	option = {
		name = OK
	}
}	
#Usurped title, take dejure vassals
character_event = {
	id = maintenance.21
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		character_event = { id = maintenance.36 } #Iron Throne takes dejure realm
		if = {
			limit = { primary_title = { title = e_north } }
			k_north = { de_jure_liege = e_north }
		}
		if = {
			limit = { primary_title = { title = e_riverlands } }
			k_riverlands = { de_jure_liege = e_riverlands }
		}
		if = {
			limit = { primary_title = { title = e_vale } }
			k_vale = { de_jure_liege = e_vale }
		}
		if = {
			limit = { primary_title = { title = e_westerlands } }
			k_westerlands = { de_jure_liege = e_westerlands }
		}
		if = {
			limit = { primary_title = { title = e_reach } }
			k_reach = { de_jure_liege = e_reach }
		}
		if = {
			limit = { primary_title = { title = e_stormlands } }
			k_stormlands = { de_jure_liege = e_stormlands }
		}
		if = {
			limit = { primary_title = { title = e_dorne } }
			k_dorne = { de_jure_liege = e_dorne }
		}
		if = {
			limit = { primary_title = { title = e_iron_isles } }
			k_iron_isles = { de_jure_liege = e_iron_isles }
		}
		#Take primary 'kingdom title
		if = {
			limit = { tier = EMPEROR }
			capital_scope = {
				kingdom = {
					if = {
						limit = { 
							holder_scope = { 
								OR = {
									character = event_target:old_usurped_title_holder
									character = FROMFROM 
								}	
								NOT = { character = ROOT }
							} 
							OR = {
								is_primary_holder_title = no
								holder_scope = { controls_religion = no }
							}
							controls_religion = no
						}
						gain_title = ROOT
					}
				}
			}
		}
		#Take primary 'duchy' title
		if = {
			limit = { 
				higher_tier_than = DUKE 
			}
			capital_scope = {
				duchy = {
					if = {
						limit = { 
							holder_scope = { 
								OR = {
									character = event_target:old_usurped_title_holder
									character = FROMFROM 
								}	
								NOT = { character = ROOT }
							} 
							OR = {
								is_primary_holder_title = no
								holder_scope = { controls_religion = no }
							}
							controls_religion = no
						}
						gain_title = ROOT
						set_variable = { which = "de_facto_kingdom" value = 0 }
					}
				}
			}
		}
		#If no count titles take one in new realm
		if = {
			limit = { 
				higher_tier_than = COUNT
				NOT = { num_of_count_titles = 1 }
			}
			FROMFROM = {
				random_realm_title = {
					limit = {					
						tier = COUNT
						de_jure_liege_or_above = ROOT #Must be in dejure realm
						holder_scope = { 
							OR = {
								character = event_target:old_usurped_title_holder
								character = FROMFROM 
							}	
						} 
						OR = { #Capital is priority if in dejure realm
							location = { is_capital = yes }
							holder_scope = {
								capital_scope = {
									NOT = {
										OR = {
											duchy = { holder_scope = { character = ROOT } }
											kingdom = { holder_scope = { character = ROOT } }
											empire = { holder_scope = { character = ROOT } }
										}
									}	
								}
							}
						}
						controls_religion = no
					}
					gain_title = ROOT
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
			}
		}		
		#Take any spare titles in usurped realm
		FROMFROM = {
			any_demesne_title = {
				limit = {							
					#is_primary_holder_title = no #is not primary title
					ROOT = { any_demesne_title = { de_jure_vassal_or_below = PREVPREV } } #Must be in ROOT's dejure realm
					NOT = { holder_scope = { any_demesne_title = { de_jure_vassal_or_below = PREVPREV } } } #Must not be in holder's dejure realm
					NOT = { #Holder must not have a county in the title
						holder_scope = { 
							any_demesne_title = { 
								tier = COUNT
								de_jure_liege_or_above = PREVPREV 
							} 
						}
					}
					OR = { #Not capital
						higher_tier_than = COUNT
						location = { is_capital = no }
					}
				}	
				usurp_title = { target = ROOT type = claim }
				set_variable = { which = "de_facto_kingdom" value = 0 }
			}
		}
		event_target:old_usurped_title_holder = {
			if = {
				limit = { NOT = { character = FROMFROM } }
				any_demesne_title = {
					limit = {							
						#is_primary_holder_title = no #is not primary title
						ROOT = { any_demesne_title = { de_jure_vassal_or_below = PREVPREV } } #Must be in ROOT's dejure realm
						NOT = { holder_scope = { any_demesne_title = { de_jure_vassal_or_below = PREVPREV } } } #Must not be in holder's dejure realm
						NOT = { #Holder must not have a county in the title
							holder_scope = { 
								any_demesne_title = { 
									tier = COUNT
									de_jure_liege_or_above = PREVPREV 
								} 
							}
						}
						OR = { #Not capital
							higher_tier_than = COUNT
							location = { is_capital = no }
						}
					}
					usurp_title = { target = ROOT type = claim }
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
			}	
		}
		if = {
			limit = { has_landed_title = d_the_giants_lance }
			b_the_gates_of_the_moon = {
				if = {
					limit = { 
						holder_scope = { 
							OR = {
								character = event_target:old_usurped_title_holder
								character = FROMFROM 
							}	
						} 
					}
					gain_title = ROOT
				}
			}
			c_bloody_gate = {
				if = {
					limit = { 
						holder_scope = { 
							OR = {
								character = event_target:old_usurped_title_holder
								character = FROMFROM 
							}	
						} 
					}
					gain_title = { target = ROOT type = claim }
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
			}			
		}
		#Take dejure vassals
		FROMFROM = {
			any_vassal = {
				limit = {	
					NOT = { de_jure_liege_or_above = PREV }
					primary_title = {	
						OR = {
							has_de_jure_pretension = ROOT 
							dejure_liege_title = { has_de_jure_pretension = ROOT }
							dejure_liege_title = { dejure_liege_title = { has_de_jure_pretension = ROOT } }
						}
					}
				}
				set_defacto_liege = ROOT
				any_demesne_title = { 
					limit = { 
						NOT = { tier = BARON } 
						NOT = { tier = EMPEROR }
					}
					set_variable = { which = "de_facto_empire" value = 0 } 
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
			}
			ROOT = { #check barons
				any_demesne_title = {
					limit = { tier = COUNT }
					any_direct_de_jure_vassal_title = {
						holder_scope = {
							if = {
								limit = {
									tier = BARON
									is_patrician = no
									liege = { character = ROOT_FROMFROM }
								}
								set_defacto_liege = ROOT
							}
						}
					}
				}
			}
			if = {
				limit = { war = no }
				any_independent_ruler = {
					limit = {	
						NOT = { de_jure_liege_or_above = PREV }
						NOT = { primary_title = { NOT = { check_variable = { which = "de_facto_empire" value = 1 } } } }
						has_opinion_modifier = { who = PREV modifier = opinion_de_facto_liege }
						war = no
						primary_title = {	
							OR = {
								has_de_jure_pretension = ROOT 
								dejure_liege_title = { has_de_jure_pretension = ROOT }
								dejure_liege_title = { dejure_liege_title = { has_de_jure_pretension = ROOT } }
							}
						}
					}
					set_defacto_liege = ROOT
					remove_opinion = { who = PREV modifier = opinion_de_facto_liege }
					any_demesne_title = { 
						limit = { 
							NOT = { tier = BARON } 
							NOT = { tier = EMPEROR }
						}
						set_variable = { which = "de_facto_empire" value = 0 } 
						set_variable = { which = "de_facto_kingdom" value = 0 }
					}
				}
			}	
			event_target:old_usurped_title_holder = {
				if = {
					limit = { NOT = { character = FROMFROM } }
					any_vassal = {
						limit = {	
							NOT = { de_jure_liege_or_above = PREV }
							primary_title = {	
								OR = {
									has_de_jure_pretension = ROOT 
									dejure_liege_title = { has_de_jure_pretension = ROOT }
									dejure_liege_title = { dejure_liege_title = { has_de_jure_pretension = ROOT } }
								}
							}
						}
						set_defacto_liege = ROOT
						any_demesne_title = { 
							limit = { 
								NOT = { tier = BARON } 
								NOT = { tier = EMPEROR }
							}
							set_variable = { which = "de_facto_empire" value = 0 } 
							set_variable = { which = "de_facto_kingdom" value = 0 }
						}
					}
				}	
			}	
			#Assign civil_war trait
			if = {
				limit = { 
					trait = civil_war
					ROOT = { 
						tier = EMPEROR
						NOT = { trait = civil_war }
					}
				}
				ROOT = { add_trait = civil_war }	
			}
		}
		if = {
			limit = {
				OR = {
					tier = EMPEROR
					tier = KING
				}
			}
			character_event = { id = diplomatic.50 } #King:s abolish spare titles
		}	
		#No gavelkind
		any_demesne_title = {
			limit = { has_law = succ_gavelkind }
			succession = primogeniture			
			if = {
				limit = {
					ROOT = {
						OR = {
							culture = dothraki
							culture = jogos_nhai
						}
					}
				}
				succession = feudal_elective
			}		
			if = {
				limit = {
					ROOT = {
						culture = lhazareen
					}
				}
				succession = ultimogeniture
			}		
			if = {
				limit = {
					ROOT = {
						OR = {
							is_patrician = yes
							culture = summer_islander
						}
					}
				}
				succession = seniority
			}	
			
			if = {
				limit = {
					ROOT = {
						is_patrician = no
						OR = {
							religion = pirate
							religion = corsair
							culture_group = free_folk
							culture = thenn
							culture = moon_clansman
						}
					}
				}
				succession = turkish_succession
			}	
			if = {
				limit = {
					holder_scope = { is_nomadic = yes }
				}
				succession = nomad_succession
			}
			if = {
				limit = {
					holder_scope = { government = alliance_government }
				}
				succession = open_elective
			}	
			gender_succ = cognatic
			if = {
				limit = {
					ROOT = {
						OR = {
							has_dynasty_flag = prefers_agnatic
							culture = ironborn 
							culture = eastern_valyrian
							culture = mantaryan
							culture = tolosi
							culture = elyrian
							religion = pirate
							religion = corsair
							culture = dothraki
						}
					}
				}
				gender_succ = agnatic	
			}	
			if = {
				limit = {
					ROOT = {
						OR = {
							culture_group = dornish
							culture = jogos_nhai
							has_dynasty_flag = prefers_cognatic
						}
					}
				}
				gender_succ = true_cognatic
			}
			if = {
				limit = {
					higher_tier_than = DUKE
					ROOT = {
						OR = {
							culture = yi_ti
							culture = lengi
						}					
						capital_scope = { region = world_leng }
						NOT = { government = NW_government }
						NOT = { has_landed_title = e_yi_ti }
						is_nomadic = no
					}
				}
				gender_succ = enatic_cognatic
			}		
		}
		recalc_succession = yes
	}
	
	option = {
		name = "OK"
	}
	
}	
#Organise mega war flags post war (from TITLE, ROOT Is holder_scope)
character_event = {
	id = maintenance.22
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = {
			limit = {
				OR = {
					is_liege_or_above = FROM
					is_ruler = no
				}
			}
			remove_trait = rebel_leader
			clr_character_flag = neutral
			clr_character_flag = against_king 
			clr_character_flag = supporting_king 
			any_vassal = {
				clr_character_flag = neutral
				clr_character_flag = against_king
				clr_character_flag = supporting_king
				clr_character_flag = rebel_leader
				remove_trait = rebel_leader
				clr_character_flag = post_civil_war_wars
			}
			if = { 	
				limit = {	has_character_flag = post_civil_war_wars }
				FROM = { set_character_flag = post_civil_war_wars }
			}
			if = {
				limit = {
					is_ruler = yes
					FROM = { #Attacker is part of an empire
						NOT = { has_character_flag = independant }
						OR = {
							has_character_flag = supporting_king 
							has_character_flag = neutral 
							has_character_flag = against_king 
							has_character_flag = rebel_leader
							has_character_flag = post_civil_war_wars
						}
					}
				}				
				set_character_flag = neutral
				any_vassal = { 
					set_character_flag = neutral 
				}
			}
			any_demesne_title = { 
				limit = {
					NOT = { tier = BARON } 
					NOT = { tier = EMPEROR }
					OR = {
						FROM = { has_claim = PREV }
						ROOT = { is_liege_or_above = FROM }
					}
				}
				set_variable = { which = "de_facto_empire" value = 0 }
			}
			FROM = {
				set_mega_war_empire_variable_ROOT_effect = yes			
			}
			primary_title = {
				ROOT = {
					any_vassal = {
						any_demesne_title = { 
							limit = {
								NOT = { tier = BARON } 
								NOT = { tier = EMPEROR }
								OR = {
									FROM = { has_claim = PREV }
									ROOT = { is_liege_or_above = FROM }
								}
							}
							set_variable = { which = "de_facto_empire" which = PREVPREVPREV } 
						} 
					}
				}	
			}
		}	
	}
	
	option = {
		name = "OK"
	}
}	
#Organise mega war flags post 'other claim' war (ROOT Is holder_scope)
character_event = {
	id = maintenance.23
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = keep_claimant_independent }
				NOT = {
					OR = {
						has_character_flag = supporting_king 
						has_character_flag = neutral 
						has_character_flag = against_king 
						has_character_flag = rebel_leader
					}
				}	
				liege = { #Liege is part of Iron Throne
					NOT = { character = ROOT }
					OR = {
						has_character_flag = supporting_king 
						has_character_flag = neutral 
						has_character_flag = against_king 
						has_character_flag = rebel_leader
					}
				}
			}
			set_character_flag = neutral 
		}
		if = {
			limit = {
				OR = {
					has_character_flag = keep_claimant_independent
					liege = { #is NOT part of Iron Throne
						NOT = {
							OR = {
								has_character_flag = supporting_king 
								has_character_flag = neutral 
								has_character_flag = against_king 
								has_character_flag = rebel_leader
							}
						}	
					}
				}	
			}
			clr_character_flag = post_civil_war_wars 
			clr_character_flag = supporting_king 
			clr_character_flag = neutral 
			clr_character_flag = against_king 
			remove_trait = rebel_leader
			any_vassal = {
				clr_character_flag = neutral
				clr_character_flag = against_king
				clr_character_flag = supporting_king
				clr_character_flag = rebel_leader
				remove_trait = rebel_leader
				clr_character_flag = post_civil_war_wars
			}			
		}
		if = {
			limit = { has_character_flag = keep_claimant_independent }
			set_defacto_liege = ROOT
			clr_character_flag = keep_claimant_independent
		}	
		any_demesne_title = { 
			limit = { 
				NOT = { tier = BARON } 
				NOT = { tier = EMPEROR }
			}
			set_variable = { which = "de_facto_empire" value = 0 } 
		}
		liege = {
			set_mega_war_empire_variable_ROOT_effect = yes		
		}
		primary_title = {
			ROOT = {
				any_vassal = {
					any_demesne_title = {
						limit = { 
							NOT = { tier = BARON } 
							NOT = { tier = EMPEROR }
						}				
						set_variable = { which = "de_facto_empire" which = PREVPREVPREV } 
					}
				}
			}	
		}
	}
	
	option = {
		name = "OK"
	}
}	
#Mega war flag maintenance post victory
character_event = {
	id = maintenance.24
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		if = { # make sure ruler is not erroneuosly vassalised
			limit = {
				independent = yes
				has_character_flag = independant
			}
			any_demesne_title = {
				limit = { 
					NOT = { tier = BARON } 
					NOT = { tier = EMPEROR }
				}				
				set_variable = { which = "de_facto_empire" value = 0 } 
			}
			if = {
				limit = { 
					NOT = { 
						any_current_enemy = { 
							trait = civil_war 
							NOT = { character = FROMFROM }
						} 
					}
				}
				clr_character_flag = rebel_leader
				remove_trait = rebel_leader
			}
		}
		if = { #is NOT part of a mega war
			limit = {
				NOT = {
					OR = {
						has_character_flag = supporting_king 
						has_character_flag = neutral 
						has_character_flag = against_king 
						has_character_flag = rebel_leader
						trait = civil_war
					}
				}
				liege = { 
					NOT = {
						OR = {
							has_character_flag = supporting_king 
							has_character_flag = neutral 
							has_character_flag = against_king 
							has_character_flag = rebel_leader
							trait = civil_war
						}
					}	
				}
			}
			clr_character_flag = post_civil_war_wars 
			clr_character_flag = supporting_king 
			clr_character_flag = neutral 
			clr_character_flag = against_king 
			clr_character_flag = independant
			remove_trait = rebel_leader
			any_vassal = {
				clr_character_flag = neutral
				clr_character_flag = against_king
				clr_character_flag = supporting_king
				clr_character_flag = rebel_leader
				remove_trait = rebel_leader
				clr_character_flag = post_civil_war_wars
			}
		}
	}
	
	option = {
		name = "OK"
	}
}	
#Subjugation flag maintenance
character_event = {
	id = maintenance.25
	picture = "GFX_fire_obsessed" 
	
	is_triggered_only = yes
	hide_window = yes
	

	immediate = {
		if = {
			limit = {
				liege = { #Liege is part of Iron Throne
					NOT = { character = ROOT }
					OR = {
						has_character_flag = supporting_king 
						has_character_flag = neutral 
						has_character_flag = against_king 
						has_character_flag = rebel_leader
					}
				}
			}
			set_character_flag = neutral 
		}
		if = {
			limit = {
				liege = { #is NOT part of Iron Throne
					NOT = {
						OR = {
							has_character_flag = supporting_king 
							has_character_flag = neutral 
							has_character_flag = against_king 
							has_character_flag = rebel_leader
						}
					}	
				}
			}
			clr_character_flag = post_civil_war_wars 
			clr_character_flag = supporting_king 
			clr_character_flag = neutral 
			clr_character_flag = against_king 
			remove_trait = rebel_leader
			any_vassal = {
				clr_character_flag = neutral
				clr_character_flag = against_king
				clr_character_flag = supporting_king
				clr_character_flag = rebel_leader
				remove_trait = rebel_leader
				clr_character_flag = post_civil_war_wars
			}
		}
		FROM = {
			any_vassal = {
				limit = { 
					primary_title = { 
						ROOT = { 
							any_demesne_title = { 
								is_variable_equal = { which = "de_facto_empire" which = PREVPREV } 
							}
						}
					}
					NOT = { character = ROOT }
				}	
				any_demesne_title = { 
					limit = { 
						NOT = { tier = BARON } 
						NOT = { tier = EMPEROR }
					}
					set_variable = { which = "de_facto_empire" value = 0 } 
				}
			}
		}
		any_demesne_title = { 
			limit = { 
				NOT = { tier = BARON } 
				NOT = { tier = EMPEROR }
			}
			set_variable = { which = "de_facto_empire" value = 0 } 
		}
		any_vassal = {
			any_demesne_title = {
				limit = { 
					NOT = { tier = BARON } 
					NOT = { tier = EMPEROR }
				}				
				set_variable = { which = "de_facto_empire" value = 0 } 
			}
		}		
		any_independent_ruler = {
			limit = {	
				has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
			}
			any_demesne_title = {
				limit = { 
					NOT = { tier = BARON } 
					NOT = { tier = EMPEROR } 
				}				
				set_variable = { which = "de_facto_empire" value = 0 } 
			}
		}	
		liege = {
			set_mega_war_empire_variable_ROOT_effect = yes
		}
		primary_title = {
			ROOT = {
				any_vassal = {
					any_demesne_title = {
						limit = { 
							NOT = { tier = BARON } 
							NOT = { tier = EMPEROR }
						}				
						set_variable = { which = "de_facto_empire" which = PREVPREVPREV } 
					}
				}
				any_independent_ruler = {
					limit = {	
						has_opinion_modifier = { who = ROOT modifier = opinion_de_facto_liege }
					}
					any_demesne_title = {
						limit = { 
							NOT = { tier = BARON } 
							NOT = { tier = EMPEROR }
						}				
						set_variable = { which = "de_facto_empire" which = PREVPREVPREV } 
					}
					character_event = { id = mega_wars.42 }
				}
			}	
		}
		#Liege Loans are lost
		clr_character_flag = mega_war_liege_loan
		remove_character_modifier = liege_loan
		clr_character_flag = liege_loan_75
		clr_character_flag = liege_loan_150
		clr_character_flag = liege_loan_300
		clr_character_flag = liege_loan_500
		#Convert former patricians to feudal
		if = {
			limit = { FROM = { is_merchant_republic = yes } }
			any_vassal = {
				limit = { is_patrician = yes }
				family_palace = { destroy_settlement = THIS }
				set_government_type = feudal_government
				primary_title = { succession = primogeniture }
			}
		}
	}
	
	option = {
		name = "OK"
	}
}	
#laws return to default bug, set empire laws to compensate
character_event = {
	id = maintenance.26
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		primary_title = { 
			if = {
				limit = { has_law = succ_gavelkind }
				succession = primogeniture
			}	
		}
	}
	
	option = {
		name = "OK"
	}
}
#If capital of a merchant republic is usurped move their capital to another coastal province if possible
character_event = {
	id = maintenance.27
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		random_demesne_title = {
			limit = {
				tier = BARON
				holding_type = city
				location = { 
					port = yes 
					is_capital = no
				}
			}
			location = { county = { gain_title = ROOT } }
			province_capital = yes
			ROOT = { 
				capital = PREV 
				set_character_flag = new_capital_found
			}
		}
		if = {
			limit = { NOT = { has_character_flag = new_capital_found } }
			random_realm_lord = {
				limit = {
					any_demesne_title = {
						tier = BARON
						holding_type = city
						location = { 
							port = yes 
							ROOT = { capital_scope = { NOT = { province_id = PREVPREV } } }
						}
					}
				}
				random_demesne_title = {
					limit = {
						tier = BARON
						holding_type = city
						location = { 
							port = yes 
							ROOT = { capital_scope = { NOT = { province_id = PREVPREV } } }
						}
					}	
					location = { county = { gain_title = ROOT } }
					province_capital = yes
					ROOT = { capital = PREV }
				}
			}
		}
		clr_character_flag = new_capital_found
	}
	
	option = {
		name = "OK"
	}
}
#After Checking cognatic realm inheritance switch realm back to cognatic
character_event = {
	id = maintenance.28
	
	is_triggered_only = yes
	hide_window = yes
	
	immediate = {
		any_demesne_title = { 
			if = {
				limit = { has_title_flag = cognatic_succession }
				clr_title_flag = cognatic_succession
				gender_succ = cognatic
			}
			if = {
				limit = { has_title_flag = true_cognatic_succession }
				clr_title_flag = true_cognatic_succession
				gender_succ = true_cognatic
			}
			if = {
				limit = { has_title_flag = enatic_cognatic_succession }
				clr_title_flag = enatic_cognatic_succession
				gender_succ = enatic_cognatic
			}
			if = {
				limit = { has_title_flag = enatic_succession }
				clr_title_flag = enatic_succession
				gender_succ = enatic
			}
		}
		event_target:cancelled_heir_1 = {
			remove_trait = disinherited
			clr_character_flag = temp_disinherited
		}
		event_target:cancelled_heir_2 = {
			remove_trait = disinherited
			clr_character_flag = temp_disinherited
			any_sibling = {
				limit = {
					trait = disinherited
					has_character_flag = temp_disinherited
				}
				remove_trait = disinherited
				clr_character_flag = temp_disinherited
			}
		}
		recalc_succession = yes
		if = {
			limit = { 
				OR = {
					current_heir = { NOT = { dynasty = ROOT } } 
					any_close_relative = { dynasty = ROOT trait = disinherited }
				}	
			}
			set_character_flag = matri_inheritance_check
		}
	}
	
	option = {
		name = "OK"
	}
}
# #Independent characters somehow ending up with no demesne
#FIXED by patch 2.2
# character_event = {
	# id = maintenance.29
	
	# is_triggered_only = yes
	# hide_window = yes
	# only_independent = yes
	
	# trigger = {
		# NOT = { demesne_size = 1 }
		# primary_title = { is_landless_type_title = no }
		# any_vassal = { num_of_count_titles = 1 }
	# }
	
	# immediate = {
		# random_vassal = {
			# limit = { num_of_count_titles = 1 }
			# random_demesne_title = {
				# limit = { tier = COUNT }
				# usurp_title = ROOT
			# }
		# }
	# }
	
	# option = {
		# name = "OK"
	# }
# }
#Inform former vassal has usurped a title of equal or higher rank
character_event = {
	id = maintenance.30
	desc = EVTDESCmaintenance.30
	
	is_triggered_only = yes
	
	option = {
		name = EVTOPTAmaintenance.30
	}
}
#Auto adding honourary titles
character_event = {
	id = maintenance.31
	
	is_triggered_only = yes
	hide_window = yes
	ai = no
	has_character_flag = auto_assign_minor_titles 
	
	trigger = { }
	
	immediate = {
		##Commanders##
		if = {
			limit = {
				NOT = {
					any_courtier_or_vassal = {
						count = 2
						liege = { character = ROOT }
						has_minor_title = title_commander
					}
				}
			}
			random_courtier_or_vassal = {
				limit = {
					martial = 8
					can_hold_title = title_commander
					ai = yes
					liege = { character = ROOT }
					NOT = { has_minor_title = title_commander }
					NOT = { has_job_title = job_marshal }				
					NOT = {
						ROOT = {
							any_courtier_or_vassal = {
								martial = 8
								can_hold_title = title_commander
								attribute_diff = { character = PREVPREV attribute = martial value = 1 }
								ai = yes
								liege = { character = ROOT }
								NOT = { has_minor_title = title_commander }
								NOT = { has_job_title = job_marshal }		
							}
						}
					}
				}
				give_minor_title = title_commander
			}
		}
		if = {
			limit = {
				NOT = {
					any_courtier_or_vassal = {
						count = 2
						liege = { character = ROOT }
						has_minor_title = title_commander
					}
				}
			}
			random_courtier_or_vassal = {
				limit = {
					martial = 8
					can_hold_title = title_commander
					ai = yes
					liege = { character = ROOT }
					NOT = { has_minor_title = title_commander }
					NOT = { has_job_title = job_marshal }				
					NOT = {
						ROOT = {
							any_courtier_or_vassal = {
								martial = 8
								can_hold_title = title_commander
								attribute_diff = { character = PREVPREV attribute = martial value = 1 }
								ai = yes
								liege = { character = ROOT }
								NOT = { has_minor_title = title_commander }
								NOT = { has_job_title = job_marshal }		
							}
						}
					}
				}
				give_minor_title = title_commander
			}
		}
		if = {
			limit = { higher_tier_than = COUNT }
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 4
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 4
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
		}	
		if = {
			limit = { higher_tier_than = DUKE }
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 6
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 6
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
		}
		if = {
			limit = { tier = EMPEROR }
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 8
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier_or_vassal = {
							count = 8
							liege = { character = ROOT }
							has_minor_title = title_commander
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						martial = 8
						can_hold_title = title_commander
						ai = yes
						liege = { character = ROOT }
						NOT = { has_minor_title = title_commander }
						NOT = { has_job_title = job_marshal }				
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									martial = 8
									can_hold_title = title_commander
									attribute_diff = { character = PREVPREV attribute = martial value = 1 }
									ai = yes
									liege = { character = ROOT }
									NOT = { has_minor_title = title_commander }
									NOT = { has_job_title = job_marshal }		
								}
							}
						}
					}
					give_minor_title = title_commander
				}
			}
		}
		##Bodyguards##
		if = {
			limit = {
				NOT = { has_landed_title = e_iron_throne } #Uses the kingsguard instead
				NOT = { culture = dothraki } #Uses Bloodriders
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							count = 5
							liege = { character = ROOT }
							has_minor_title = title_bodyguard
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						combat_rating = 5.17
						can_hold_title = title_bodyguard
						liege = { character = ROOT }
						NOT = { has_minor_title = title_bodyguard }
						opinion = { who = ROOT value = -50 }
						reverse_opinion = { who = ROOT value = -50 }						
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									combat_rating = 5.17
									can_hold_title = title_bodyguard
									liege = { character = ROOT }
									NOT = { has_minor_title = title_bodyguard }	
									combat_rating_diff = { character = PREVPREV value = 0.5 }
									opinion = { who = ROOT value = -50 }
									reverse_opinion = { who = ROOT value = -50 }	
								}
							}
						}
					}
					give_minor_title = title_bodyguard
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							count = 5
							liege = { character = ROOT }
							has_minor_title = title_bodyguard
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						combat_rating = 5.17
						can_hold_title = title_bodyguard
						liege = { character = ROOT }
						NOT = { has_minor_title = title_bodyguard }
						opinion = { who = ROOT value = -50 }
						reverse_opinion = { who = ROOT value = -50 }						
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									combat_rating = 5.17
									can_hold_title = title_bodyguard
									liege = { character = ROOT }
									NOT = { has_minor_title = title_bodyguard }	
									combat_rating_diff = { character = PREVPREV value = 0.5 }
									opinion = { who = ROOT value = -50 }
									reverse_opinion = { who = ROOT value = -50 }	
								}
							}
						}
					}
					give_minor_title = title_bodyguard
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							count = 5
							liege = { character = ROOT }
							has_minor_title = title_bodyguard
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						combat_rating = 5.17
						can_hold_title = title_bodyguard
						liege = { character = ROOT }
						NOT = { has_minor_title = title_bodyguard }
						opinion = { who = ROOT value = -50 }
						reverse_opinion = { who = ROOT value = -50 }						
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									combat_rating = 5.17
									can_hold_title = title_bodyguard
									liege = { character = ROOT }
									NOT = { has_minor_title = title_bodyguard }	
									combat_rating_diff = { character = PREVPREV value = 0.5 }
									opinion = { who = ROOT value = -50 }
									reverse_opinion = { who = ROOT value = -50 }	
								}
							}
						}
					}
					give_minor_title = title_bodyguard
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							count = 5
							liege = { character = ROOT }
							has_minor_title = title_bodyguard
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						combat_rating = 5.17
						can_hold_title = title_bodyguard
						liege = { character = ROOT }
						NOT = { has_minor_title = title_bodyguard }
						opinion = { who = ROOT value = -50 }
						reverse_opinion = { who = ROOT value = -50 }						
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									combat_rating = 5.17
									can_hold_title = title_bodyguard
									liege = { character = ROOT }
									NOT = { has_minor_title = title_bodyguard }	
									combat_rating_diff = { character = PREVPREV value = 0.5 }
									opinion = { who = ROOT value = -50 }
									reverse_opinion = { who = ROOT value = -50 }	
								}
							}
						}
					}
					give_minor_title = title_bodyguard
				}
			}
			if = {
				limit = {
					NOT = {
						any_courtier = {
							count = 5
							liege = { character = ROOT }
							has_minor_title = title_bodyguard
						}
					}
				}
				random_courtier_or_vassal = {
					limit = {
						combat_rating = 5.17
						can_hold_title = title_bodyguard
						liege = { character = ROOT }
						NOT = { has_minor_title = title_bodyguard }
						opinion = { who = ROOT value = -50 }
						reverse_opinion = { who = ROOT value = -50 }						
						NOT = {
							ROOT = {
								any_courtier_or_vassal = {
									combat_rating = 5.17
									can_hold_title = title_bodyguard
									liege = { character = ROOT }
									NOT = { has_minor_title = title_bodyguard }	
									combat_rating_diff = { character = PREVPREV value = 0.5 }
									opinion = { who = ROOT value = -50 }
									reverse_opinion = { who = ROOT value = -50 }	
								}
							}
						}
					}
					give_minor_title = title_bodyguard
				}
			}
		}
		##Other Titles##
		if = { #Westerosi
			limit = {
				is_republic = no
				is_theocracy = no		
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
				}
				NOT = { culture = moon_clansman }
			}
			if = {
				limit = {
					higher_tier_than = DUKE
					NOT = { has_assigned_minor_title = title_keeper_of_swans }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_keeper_of_swans
					}
					give_minor_title = title_keeper_of_swans
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_master_of_the_hunt }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_master_of_the_hunt
					}
					give_minor_title = title_master_of_the_hunt
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_high_almoner }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_high_almoner	
					}
					give_minor_title = title_high_almoner
				}
			}			
		}
		if = { #Master of the Horse
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
					culture_group = dothraki_group
				}
				NOT = { culture = moon_clansman }
				NOT = { has_assigned_minor_title = title_master_of_the_horse }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_master_of_the_horse
				}
				give_minor_title = title_master_of_the_horse
			}
		}
		if = { #Cupbearer
			limit = {
				is_republic = no
				is_theocracy = no
				NOT = { trait = nightswatch }
				OR = {
					culture_group = andal
					culture_group = dornish
					culture_group = first_men
					culture_group = hyrkoon_group
					culture_group = ibbenese
					culture_group = sarnor_group
					culture_group = iron_isles_culture
					AND = {
						culture_group = valyrian
						capital_scope = { region = world_westeros }
					}
				}
				NOT = { culture = moon_clansman }
				NOT = { has_assigned_minor_title = title_cupbearer }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_cupbearer
				}
				give_minor_title = title_cupbearer
			}
		}
		if = { #Senschal
			limit = {
				higher_tier_than = DUKE
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}	
					culture_group = dothraki_group
					culture = jogos_nhai
					culture_group = nghai_group
				}
				is_nomadic = no
				is_tribal = no
				NOT = { has_assigned_minor_title = title_seneschal }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_seneschal
				}
				give_minor_title = title_seneschal
			}
		}
		if = { #Paramount Knight
			limit = {
				higher_tier_than = DUKE
				independent = yes
				religion = the_seven
				OR = { #Reach has The Order of the Green Hand
					NOT = { tier = EMPEROR }
					NOT = {
						OR = {
							AND = {
								capital_scope = { region = world_reach }
								culture_group = andal
							}
							dynasty = 1254 #Gardener
							has_landed_title = e_reach
						}
					}	
				}
				NOT = { has_assigned_minor_title = title_paramount_knight }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_paramount_knight
				}
				give_minor_title = title_paramount_knight
			}
		}
		if = { #Food taster
			limit = {
				OR = {
					is_patrician = yes
					higher_tier_than = DUKE
				}	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = asshai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
					culture_group = dothraki_group
					culture = jogos_nhai
					culture_group = nghai_group
				}
				is_nomadic = no
				is_tribal = no
				NOT = { has_assigned_minor_title = title_food_taster }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_food_taster
				}
				give_minor_title = title_food_taster
			}
		}	
		if = { #Court Musician
			limit = {
				NOT = { trait = nightswatch }
				is_merchant_republic = no
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = yi_ti_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_court_musician }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_court_musician
				}
				give_minor_title = title_court_musician
			}
		}
		if = { #Court poet
			limit = {
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = yi_ti_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_court_poet }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_court_poet
				}
				give_minor_title = title_court_poet
			}
		}	
		if = { #Chief architect
			limit = {
				NOT = { trait = nightswatch }
				is_merchant_republic = no
				OR = {
					culture_group = moraqi_group
					culture_group = free_cities
					culture_group = ghiscari_group
					culture_group = summer_islands
					culture_group = qarth_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = nghai_group
					AND = {
						culture_group = valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
				}
				NOT = { has_assigned_minor_title = title_chief_architect }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_chief_architect
				}
				give_minor_title = title_chief_architect
			}
		}	
		if = { #Republics
			limit = {
				is_merchant_republic = yes
			}
			if = {
				limit = { NOT = { has_assigned_minor_title = { title = title_state_inquisitor count = 3 } } }
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_state_inquisitor
					}
					give_minor_title = title_state_inquisitor
				}
				if = {
					limit = { NOT = { has_assigned_minor_title = { title = title_state_inquisitor count = 3 } } }
					random_vassal = {
						limit = {
							opinion = { who = ROOT value = -50 }
							NOT = { opinion = { who = ROOT value = 0 } }
							OR = {
								NOT = { tier = BARON }
								ROOT = { tier = COUNT }
							}
							can_hold_title = title_state_inquisitor
						}
						give_minor_title = title_state_inquisitor
					}
					if = {
						limit = { NOT = { has_assigned_minor_title = { title = title_state_inquisitor count = 3 } } }
						random_vassal = {
							limit = {
								opinion = { who = ROOT value = -50 }
								NOT = { opinion = { who = ROOT value = 0 } }
								OR = {
									NOT = { tier = BARON }
									ROOT = { tier = COUNT }
								}
								can_hold_title = title_state_inquisitor
							}
							give_minor_title = title_state_inquisitor
						}
					}
				}			
			}
			if = {
				limit = {
					NOT = { has_dlc = "Zeus" }
					# NOT = {
						# OR = {
							# culture_group = andal
							# culture_group = dornish
							# culture_group = first_men
							# culture_group = hyrkoon_group
							# culture_group = ibbenese
							# culture_group = sarnor_group
							# AND = {
								# culture_group = valyrian
								# capital_scope = { region = world_westeros }
							# }
						# }
					# }	
					NOT = { has_assigned_minor_title = title_high_admiral_B }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_high_admiral_B
					}
					give_minor_title = title_high_admiral_B
				}
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = title_high_judge }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_high_judge
					}
					give_minor_title = title_high_judge
				}
			}
		}
		if = { #Lawspeaker
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = moraqi_group
					culture_group = asshai_group
					culture_group = sothoryos_islands
					culture_group = jade_islands_group
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_lawspeaker }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_lawspeaker
				}
				give_minor_title = title_lawspeaker
			}
		}
		if = { #Champion
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_champion }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_champion
				}
				give_minor_title = title_champion
			}
		}
		if = { #Master of the Blade
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_blade }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_master_of_the_blade
				}
				give_minor_title = title_master_of_the_blade
			}
		}
		if = { #Master of the Bow
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = hyrkoon_group
					culture_group = free_folk
					culture_group = iron_isles_culture
					culture_group = summer_islands
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_bow }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_master_of_the_bow
				}
				give_minor_title = title_master_of_the_bow
			}
		}
		if = { #Venerable elder
			limit = {
				is_republic = no
				is_theocracy = no	
				NOT = { trait = nightswatch }
				OR = {
					culture_group = free_folk
					culture_group = summer_islands
					culture = moon_clansman
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_venerable_elder }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_venerable_elder
				}
				give_minor_title = title_venerable_elder
			}
		}
		if = { #master of elephants
			limit = {
				OR = {
					is_feudal = yes
					is_tribal = yes
				}
				higher_tier_than = DUKE
				OR = {
					culture_group = moraqi_group
					culture_group = yi_ti_group
					culture = volantene
					culture = eastern_valyrian
					culture_group = ghiscari_group
					culture_group = qarth_group
					culture_group = jade_islands_group
					AND = {
						culture = high_valyrian
						NOT = { capital_scope = { region = world_westeros } }
					}
					culture_group = dothraki_group
					culture = jogos_nhai
				}
				NOT = { has_assigned_minor_title = title_master_of_the_royal_elephants }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_master_of_the_royal_elephants
				}
				give_minor_title = title_master_of_the_royal_elephants
			}
		}
		if = { #royal builder
			limit = {
				OR = {
					is_tribal = yes
					is_feudal = yes
				}	
				higher_tier_than = DUKE
				culture_group = yi_ti_group
				NOT = { has_assigned_minor_title = title_royal_builder }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_royal_builder
				}
				give_minor_title = title_royal_builder
			}
		}
		# if = { #Master of Ships
			# limit = {
				# NOT = { has_dlc = "Zeus" }
				# AND = {
					# OR = {
						# is_merchant_republic = yes
						# AND = {
							# independent = yes
							# higher_tier_than = DUKE
							# capital_scope = { port = yes }
						# }	
					# }	
					# OR = {
						# culture_group = andal
						# culture_group = dornish
						# culture_group = first_men
						# culture_group = hyrkoon_group
						# culture_group = ibbenese
						# culture_group = sarnor_group
						# AND = {
							# culture_group = valyrian
							# capital_scope = { region = world_westeros }
						# }
					# }
				# }
				# NOT = { has_assigned_minor_title = title_master_of_ships_B }
			# }
			# random_vassal = {
				# limit = {
					# opinion = { who = ROOT value = -50 }
					# NOT = { opinion = { who = ROOT value = 0 } }
					# OR = {
						# NOT = { tier = BARON }
						# ROOT = { tier = COUNT }
					# }
					# can_hold_title = title_master_of_ships_B
				# }
				# give_minor_title = title_master_of_ships_B
			# }
		# }
		if = { #Small council
			limit = {
				NOT = { has_dlc = "Zeus" }
				has_landed_title = e_iron_throne
				NOT = { has_assigned_minor_title = { title = title_small_council_advisor count = 3 } }
			}
			random_vassal = {
				limit = {
					opinion = { who = ROOT value = -50 }
					NOT = { opinion = { who = ROOT value = 0 } }
					OR = {
						NOT = { tier = BARON }
						ROOT = { tier = COUNT }
					}
					can_hold_title = title_small_council_advisor
				}
				give_minor_title = title_small_council_advisor
			}
			if = {
				limit = {
					NOT = { has_assigned_minor_title = { title = title_small_council_advisor count = 3 } }
				}
				random_vassal = {
					limit = {
						opinion = { who = ROOT value = -50 }
						NOT = { opinion = { who = ROOT value = 0 } }
						OR = {
							NOT = { tier = BARON }
							ROOT = { tier = COUNT }
						}
						can_hold_title = title_small_council_advisor
					}
					give_minor_title = title_small_council_advisor
				}
				if = {
					limit = {
						NOT = { has_assigned_minor_title = { title = title_small_council_advisor count = 3 } }
					}
					random_vassal = {
						limit = {
							opinion = { who = ROOT value = -50 }
							NOT = { opinion = { who = ROOT value = 0 } }
							OR = {
								NOT = { tier = BARON }
								ROOT = { tier = COUNT }
							}
							can_hold_title = title_small_council_advisor
						}
						give_minor_title = title_small_council_advisor
					}
				}
			}		
		}
	}
	
	option = {
		name = OK
	}
}
#Head of House Yronwood is the Bloodroyal
character_event = {
	id = maintenance.32
	
	is_triggered_only = yes
	hide_window = yes
	only_rulers = yes
	
	trigger = {
		dynasty = 12
		dynasty_head = { character = ROOT }
		NOT = { has_minor_title = title_the_bloodroyal }
	}
	
	immediate = {
		give_minor_title = title_the_bloodroyal
	}
	
	option = {
		name = "OK"
	}
}
#Show me small council event
character_event = {
	id = maintenance.33
	desc = EVT_DESC_maintenance.33
	picture = GFX_evt_council
	
	is_triggered_only = yes
	
	trigger = { has_character_flag = show_me_small_council }
	
	option = {
		name = EVT_OPTA_maintenance.33
		clr_character_flag = show_me_small_council
		e_iron_throne = {
			holder_scope = {
				# Councillors
				if = {
					limit = { has_regent = yes }
					regent = {
						tooltip = { }
						character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEREGENT }
					}
				}	
				job_castellan = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEHAND }
				}
				if = {
					limit = { 
						is_female = yes 
						spouse = { 
							is_alive = yes 
							liege = { character = PREVPREV }
							is_councillor = no
							NOT = { is_voter = yes }
						}
					}
					spouse = {
						tooltip = { }
						character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMECONSORT }
					}
				}
				job_chancellor = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMELAWS }
				}
				job_treasurer = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMECOIN }
				}
				job_marshal = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEARMS }
				}					
				job_spiritual = { # Maester
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEMAESTER }
				}
				job_spymaster = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESPYMASTER }
				}
				job_priest = {
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEPRIEST } 
				}
				# Vassals
				# random_vassal = {
					# limit = { has_minor_title = title_master_of_ships }
					# tooltip = { }
					# character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESHIPS }
				# }
				# random_vassal = {
					# limit = { has_minor_title = title_master_of_ships_B }
					# tooltip = { }
					# character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESHIPS }
				# }
				any_vassal = {
					limit = { 
						OR = {
							has_minor_title = title_small_council_advisor
							has_minor_title = title_councilmember_emperor # Zeus users
							has_minor_title = title_councilmember_king
						}
					}
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESMALLCOUNCIL }
				}						
				random_vassal = {
					limit = { has_minor_title = title_high_judge }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEJUDGE }
				}
				random_vassal = {
					limit = { has_minor_title = title_high_admiral }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEADMIRAL }
				}
				random_vassal = {
					limit = { has_minor_title = title_high_admiral_B }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEADMIRAL }
				}
				random_vassal = {
					limit = { has_minor_title = title_justice_of_king }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEJUSTICE }
				}
				#Courtiers
				# random_courtier = {
					# limit = { has_minor_title = title_master_of_ships is_ruler = no }
					# tooltip = { }
					# character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESHIPS }
				# }
				# random_courtier = {
					# limit = { has_minor_title = title_master_of_ships_B is_ruler = no }
					# tooltip = { }
					# character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESHIPS }
				# }
				any_courtier = {
					limit = { has_minor_title = title_small_council_advisor is_ruler = no }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMESMALLCOUNCIL }
				}						
				random_courtier = {
					limit = { has_minor_title = title_high_judge is_ruler = no }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEJUDGE }
				}
				random_courtier = {
					limit = { has_minor_title = title_high_admiral is_ruler = no }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEADMIRAL }
				}
				random_courtier = {
					limit = { has_minor_title = title_high_admiral_B is_ruler = no }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEADMIRAL }
				}
				random_courtier = {
					limit = { has_minor_title = title_justice_of_king is_ruler = no }
					tooltip = { }
					character_event = { id = maintenance.33 days = 1 tooltip = TOOLTIPCOUNCILNAMEJUSTICE }
				}
				custom_tooltip = {
					text = TOOLTIPLISTWARDENS
				}
				random_realm_character = {
					limit = { has_minor_title = warden_north is_liege_or_above = PREV }
					tooltip = { }
					custom_tooltip = {
						text = TOOLTIPCOUNCILNAMEWARDENNORTH
					}
				}
				random_realm_character = {
					limit = { has_minor_title = warden_east is_liege_or_above = PREV }
					tooltip = { }
					custom_tooltip = {
						text = TOOLTIPCOUNCILNAMEWARDENEAST
					}
				}
				random_realm_character = {
					limit = { has_minor_title = warden_west is_liege_or_above = PREV }
					tooltip = { }
					custom_tooltip = {
						text = TOOLTIPCOUNCILNAMEWARDENWEST
					}
				}
				random_realm_character = {
					limit = { has_minor_title = warden_south is_liege_or_above = PREV }
					tooltip = { }
					custom_tooltip = {
						text = TOOLTIPCOUNCILNAMEWARDENSOUTH
					}
				}
			}
		}
	}	
}
#Refill holding levy post war (from cb_types and other events)
character_event = {
	id = maintenance.34
	
	is_triggered_only = yes
	hide_window = yes
	only_rulers = yes
	
	immediate = {
		any_demesne_title = {
			limit = { tier = BARON }
			remove_holding_modifier = recently_conquered
			refill_holding_levy = yes
		}
	}
	
	option = {
		name = "OK"
	}
}
#Win dejure war against wildling, take all occupied holdings (from cb_types)
character_event = {
	id = maintenance.35
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		event_target:wildling_title = {
			if = { #non-emperor titles are usurped
				limit = { lower_tier_than = EMPEROR }
				usurp_title = { target = ROOT type = claim }
			}
			any_de_jure_vassal_title = { #take any non-wildling vassals
				limit = { 
					higher_tier_than = BARON
					holder_scope = {
						liege = { character = FROMFROM }
						NOT = { trait = wildling }
					}															
				}
				holder_scope = { set_defacto_liege = ROOT }
			}
			any_de_jure_vassal_title = { #take all occupied provinces held by count tier wildlings
				limit = { 
					tier = COUNT
					holder_scope = {
						tier = COUNT
						is_liege_or_above = FROMFROM
						trait = wildling 
					}
					location = {
						any_province_lord = {
							any_demesne_title = {
								tier = BARON
								location = { province_id = PREVPREVPREV }
								controller = { character = ROOT }
							}
						}
					}								
				}
				usurp_title = { target = ROOT type = claim }
			}
			
			any_de_jure_vassal_title = { #take occupied higher titles held by wildlings
				limit = { 
					higher_tier_than = COUNT
					holder_scope = {
						OR = {
							character = FROMFROM
							is_liege_or_above = FROMFROM
						}
						trait = wildling 
						any_demesne_title = {
							tier = BARON							
							controller = { character = ROOT }
						}
					}															
				}
				usurp_title = { target = ROOT type = claim }
			}
			any_de_jure_vassal_title = { #take all remaining occupied provinces held by wildlings
				limit = { 
					tier = COUNT
					holder_scope = {
						OR = {
							character = FROMFROM
							is_liege_or_above = FROMFROM
						}
						trait = wildling 
					}
					location = {
						any_province_lord = {
							any_demesne_title = {
								tier = BARON
								location = { province_id = PREVPREVPREV }
								controller = { character = ROOT }
							}
						}
					}								
				}
				usurp_title = { target = ROOT type = claim }
			}
			if = { #emperor titles are destroyed
				limit = { tier = EMPEROR }
				destroy_landed_title = FROMFROM 
			}	
			FROMFROM = { set_defacto_liege = THIS }
		}	
	}
	
	option = {
		name = "OK"
	}
}	

#Iron Throne wins de jure kingdom war, assimilates de jure realm
character_event = {
	id = maintenance.36
	desc = "EVTDESCmaintenance.36"
	
	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		has_landed_title = e_iron_throne
	}
	
	option = {
		name = "EVTOPTAmaintenance.36" #	
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_north
					k_north = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_north = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_north
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_riverlands
					k_riverlands = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_riverlands = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_riverlands
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_vale
					k_vale = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_vale = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_vale
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_westerlands
					k_westerlands = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_westerlands = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_westerlands
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_reach
					k_reach = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_reach = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_reach
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_stormlands
					k_stormlands = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_stormlands = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_stormlands
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_dorne
					k_dorne = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_dorne = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_dorne
		}
		if = { 	
			limit = { 
				OR = {
					has_character_flag = dejure_iron_isles
					k_iron_isles = { 
						holder_scope = { 
							OR = {
								vassal_of = ROOT 
								primary_title = { is_variable_equal = { which = "de_facto_empire" value = 1 } } #iron throne
							}	
						} 
					} 
				}	
			}
			e_iron_throne = {
				k_iron_isles = { de_jure_liege = PREV }
			}
			clr_character_flag = dejure_iron_isles
		}
	}
}
#Crownland Maintenance for Iron Throne post war
character_event = {
	id = maintenance.37
	#desc = "EVTDESC999900967"
	
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		FROMFROM = {
			any_demesne_title = {
				limit = {
					OR = {
						title = k_crownlands
						region = world_crownlands
					}
				}
				usurp_title = { target = ROOT type = claim }
				set_variable = { which = "de_facto_kingdom" value = 0 }
			}
			any_vassal = {
				limit = {
					primary_title = {
						region = world_crownlands
					}
				}
				set_defacto_liege = ROOT
				any_demesne_title = { 
					limit = { 
						NOT = { tier = BARON } 
						NOT = { tier = EMPEROR }
					}
					set_variable = { which = "de_facto_empire" value = 0 } 
					set_variable = { which = "de_facto_kingdom" value = 0 }
				}
			}
		}
		if = {
			limit = {
				primary_title = { title = e_iron_throne }
				ai = yes
				NOT = { has_global_flag = KL_not_capital }
				capital_holding = { location = { NOT = { province_id = 226 } } }
				has_landed_title = b_red_keep
				is_feudal = yes
			}
			b_red_keep = { 
				ROOT = { capital = PREV }
			}
		}
	}

	option = {
		name = "EVTOPTA999900967"
		# e_iron_throne = {
			# holder_scope = {
				# character_event = { id = maintenance.38 tooltip = TOOLTIPmaintenance.38 }
			# }
		# }
	}
}
# character_event = {
	# id = maintenance.38
	# desc = "EVTDESCmaintenance.38"
	
	# is_triggered_only = yes
	
	# immediate = { character_event = { id = 66111 } }

	# option = {
		# name = "EVTOPTAmaintenance.38"
		# FROM = {
			# any_vassal = {
				# limit = {
					# capital_scope = {
						# region = world_crownlands
					# }
				# }
				# set_defacto_liege = ROOT	
			# }
		# }
	# }
# }


# House Forrester names a Sentinel
character_event = {
	id = maintenance.39
	desc = "AI_EVENT"
	
	is_triggered_only = yes
	only_playable = yes

	trigger = {
		ai = yes
		dynasty = 1443
		has_landed_title = c_blackgrove
		NOT = { has_assigned_minor_title = title_sentinel }
	}

	option = {
		name = "OK"
		random_courtier = { # Master at Arms and Castellan first
			limit = {
				can_hold_title = title_sentinel
				NOT = { has_minor_title = title_sentinel }

				OR = {
					has_job_title = job_castellan
					has_job_title = job_marshal
				}
				personal_opinion = { who = ROOT value = 35 } #Like each other
				reverse_personal_opinion = { who = ROOT value = 35 }
			}
			give_minor_title = title_sentinel
			break = yes
		}
		random_courtier = { # Other council members excluding maester and religious
			limit = {
				can_hold_title = title_sentinel
				NOT = { has_minor_title = title_sentinel }
				
				NAND = {
					has_job_title = job_spiritual
					OR = {
						trait = maester
						trait = archmaester
					}
				}
				personal_opinion = { who = ROOT value = 35 } #Like each other
				reverse_personal_opinion = { who = ROOT value = 35 }
			}
			give_minor_title = title_sentinel
			break = yes
		}
	}
}
#AI Gender Law Check
character_event = {
	id = maintenance.40
	
	is_triggered_only = yes
	only_rulers = yes
	capable_only = yes
	prisoner = no
	min_age = 16
	ai = yes
	war = no
	
	trigger = {
		OR = {
			is_feudal = yes
			is_tribal = yes
			NOT = { tier = BARON }
		}
		OR = {
			primary_title = { has_law = succ_gavelkind }
			ruled_years = 5
		}	
		#is_merchant_republic = no
		#is_patrician = no
		OR = {
			culture = jogos_nhai
			is_nomadic = no
		}	
		holy_order = no
		mercenary = no
		#NOT = { any_vassal = { NOT = { opinion = { who = ROOT value = 0 } } } }
		NOT = { culture_group = unoccupied_group }
	}
	
	option = {
		name = "COGNATIC"
		trigger = {
			any_demesne_title = {
				tier = ROOT
				NOT = { has_law = cognatic_succession }
				is_primary_type_title = no				
			}
			OR = {
				independent = yes
				NOT = {
					any_liege = {
						holy_order = yes
					}
				}
			}
			has_horde_culture = no
			OR = { #God Empresses
				AND = {
					NOT = { culture = yi_ti }
					NOT = { culture = lengi }
				}	
				NOT = { higher_tier_than = DUKE }
				NOT = { capital_scope = { region = world_leng } }
				has_landed_title = e_yi_ti
			}	
			NOT = {
				OR = {
					has_dynasty_flag = prefers_cognatic
					has_dynasty_flag = prefers_agnatic
					has_character_flag = agnatic_female_heir
					culture = ironborn
					culture = eastern_valyrian
					culture = mantaryan
					culture = tolosi
					culture = elyrian
					culture_group = dornish 
					culture = jogos_nhai
					religion = pirate
					religion = corsair
					culture = dothraki
					current_heir = { has_character_modifier = nominated_heir } #Has chosen a daughter as heir
					AND = {
						has_character_flag = has_great_council_heir
						current_heir = { has_character_modifier = great_council_heir }
					}
					trait = nightswatch
					any_liege = { trait = nightswatch }
					AND = {
						is_patrician = yes
						family_palace = { current_heir = { dynasty = ROOT is_female = no } }
					}
				}
			}
		}
		ai_chance = { 
			factor = 9999
		}
		any_demesne_title = {
			limit = {
				tier = ROOT
				NOT = { has_law = cognatic_succession }	
				is_primary_type_title = no
			}
			add_law = cognatic_succession	
			ROOT = { recalc_succession = yes }
			any_de_jure_vassal = {
				limit = { ai = no }
				letter_event = { id = 45343 }
			}
			hidden_tooltip = { #patrician family palace workaround
				holder_scope = {
					if = {
						limit = {
							is_patrician = yes
							primary_title = { title = PREVPREV }
						}
						family_palace = { gender_succ = cognatic }
						recalc_succession = yes
					}
				}	
			}
		}
	}
	
	option = {
		name = "AGNATIC"
		trigger = {
			OR = {
				has_dynasty_flag = prefers_agnatic
				culture = ironborn 
				culture = eastern_valyrian
				culture = mantaryan
				culture = tolosi
				culture = elyrian	
				religion = pirate
				religion = corsair
				culture = dothraki
				AND = { #May opt for this if heir doesn't preserve dynasty
					OR = {
						age = 30
						NOT = { fertility = 0.1 }
					}
					NOT = { primary_title = { has_law = true_cognatic_succession } }
					primary_title = { has_law = succ_primogeniture }
					NOT = { has_dynasty_flag = prefers_cognatic }
					NOT = { trait = just }						
					current_heir = { 
						OR = {
							AND = { #female heirs
								is_female = yes 
								age = 16
								NOT = { is_married_matrilineally = yes }
							}	
							AND = { #non-dynast heirs, non child
								ROOT = { is_female = no }
								NOT = { is_child_of = ROOT }
								NOT = { dynasty = ROOT }
							}
						}	
						is_close_relative = ROOT					
						NOT = { any_child = { dynasty = ROOT NOT = { trait = bastard } } }
					}										
				}
			}
			any_demesne_title = {
				tier = ROOT
				NOT = { has_law = agnatic_succession }
				NOT = { title = c_dosh_khaleen }			
			}
			OR = { #God Empresses
				AND = {
					NOT = { culture = yi_ti }
					NOT = { culture = lengi }
				}	
				NOT = { higher_tier_than = DUKE }
				NOT = { capital_scope = { region = world_leng } }
				has_landed_title = e_yi_ti
			}	
			NOT = {
				OR = {
					current_heir = { has_character_modifier = nominated_heir } #Has chosen a daughter as heir
					AND = {
						has_character_flag = has_great_council_heir
						current_heir = { has_character_modifier = great_council_heir }
					}
					#True Cognatic/Enatic Preferences take priority
					culture_group = dornish 
					has_dynasty_flag = prefers_cognatic
					culture = jogos_nhai
				}
			}			
		}
		ai_chance = { 
			factor = 9999
			modifier = { #Must have a male relation to fall back on 
				factor = 0
				NOT = {
					any_dynasty_member = { 
						#is_close_relative = ROOT 
						NOT = { character = ROOT }
						is_female = no 
						is_alive = yes 
						OR = {
							is_married = yes
							can_marry = yes
							is_betrothed = yes
							trait = widowed
						}
					}
				}
			}
		}
		if = { #If using this to bypass female heir mark as such
			limit = {
				OR = {
					age = 30
					NOT = { fertility = 0.1 }
				}
				NOT = { primary_title = { has_law = true_cognatic_succession } }
				primary_title = { has_law = succ_primogeniture }
				NOT = { has_dynasty_flag = prefers_cognatic }
				NOT = { trait = just }						
				current_heir = { 
					OR = {
						AND = {
							is_female = yes 
							age = 16
							NOT = { is_married_matrilineally = yes }
						}	
						AND = {
							ROOT = { is_female = no }
							NOT = { is_child_of = ROOT }
							NOT = { dynasty = ROOT }
						}	
					}	
					is_close_relative = ROOT					
					NOT = { any_child = { dynasty = ROOT NOT = { trait = bastard } } }
				}
				any_dynasty_member = { #Must have a male relation to fall back on 
					#is_close_relative = ROOT 
					NOT = { character = ROOT }
					is_female = no 
					is_alive = yes 
					OR = {
						is_married = yes
						can_marry = yes
						is_betrothed = yes
						trait = widowed
					}
				}
			}
			set_character_flag = agnatic_female_heir
		}
		any_demesne_title = {
			limit = {
				tier = ROOT
				NOT = { has_law = agnatic_succession }
				NOT = { title = c_dosh_khaleen }
			}
			add_law = agnatic_succession	
			ROOT = { recalc_succession = yes }
			any_de_jure_vassal = {
				limit = { ai = no }
				letter_event = { id = 45343 }
			}
			hidden_tooltip = { #patrician family palace workaround
				holder_scope = {
					if = {
						limit = {
							is_patrician = yes
							primary_title = { title = PREVPREV }
						}
						family_palace = { gender_succ = agnatic }
						recalc_succession = yes
					}
				}	
			}
		}
	}
	
	option = {
		name = "ABSOLUTE COGNATIC"
		trigger = {
			OR = {
				culture_group = dornish 
				culture = jogos_nhai
				has_dynasty_flag = prefers_cognatic
			}
			any_demesne_title = {
				tier = ROOT
				NOT = { has_law = true_cognatic_succession }		
				is_primary_type_title = no		
			}
			
			has_horde_culture = no
			NOT = {
				OR = {
					has_dynasty_flag = prefers_agnatic
					AND = {
						has_character_flag = has_great_council_heir
						current_heir = { has_character_modifier = great_council_heir }
					}
					trait = nightswatch
					any_liege = { trait = nightswatch }
				}
			}
		}
		ai_chance = { 
			factor = 9999
		}
		any_demesne_title = {
			limit = {
				tier = ROOT
				NOT = { has_law = true_cognatic_succession }
				is_primary_type_title = no
			}
			add_law = true_cognatic_succession	
			any_de_jure_vassal = {
				limit = { ai = no }
				letter_event = { id = 45343 }
			}
			hidden_tooltip = { #patrician family palace workaround
				holder_scope = {
					if = {
						limit = {
							is_patrician = yes
							primary_title = { title = PREVPREV }
						}
						family_palace = { gender_succ = true_cognatic }
						recalc_succession = yes
					}
				}	
			}
		}
		recalc_succession = yes
		any_child = { #Check daughter's marriages
			limit = {
				is_female = yes
				is_married = yes
				NOT = { trait = bastard }
				is_married_matrilineally = no
			}
			if = { #If married to some bozo change to matrilineal immediately
				limit = { 
					spouse = {
						is_ruler = no
						OR = {
							dynasty = 0
							trait = bastard
							AND = {
								NOT = { father_even_if_dead = { always = yes } }
								NOT = { mother_even_if_dead = { always = yes } }
							}
						}
					}
				}
				set_character_flag = no_wedding_event
				spouse = {
					set_character_flag = no_wedding_event
					remove_spouse = spouse
					add_spouse_matrilineal = PREV
					clr_character_flag = no_wedding_event
					prestige = -150
				}
				prestige = 150
				clr_character_flag = no_wedding_event
				set_character_flag = marriage_set
			}
			if = { #If not married to a bozo add disinherited trait
				limit = { 
					NOT = { has_character_flag = marriage_set }
				}
				set_character_flag = marriage_set
				add_trait = disinherited
				ROOT = { set_character_flag = matri_inheritance_check }
				recalc_succession = yes
			}
			clr_character_flag = marriage_set
		}
	}
	
	option = {
		name = "ENATIC"
		trigger = {	
			OR = {
				has_landed_title = c_dosh_khaleen
				AND = { #God Empresses
					OR = {
						culture = yi_ti
						culture = lengi
					}	
					higher_tier_than = DUKE
					capital_scope = { region = world_leng }
					NOT = { has_landed_title = e_yi_ti }
				}
			}
			any_demesne_title = {
				tier = ROOT
				NOT = { has_law = enatic_succession }	
			}				
			NOT = {
				OR = {
					trait = nightswatch
					any_liege = { trait = nightswatch }
				}
			}
			NOT = {
				AND = {
					has_character_flag = has_great_council_heir
					current_heir = { has_character_modifier = great_council_heir }
				}	
			}
		}
		ai_chance = { 
			factor = 9999
		}
		any_demesne_title = {
			limit = {
				tier = ROOT
				NOT = { has_law = enatic_succession }
			}
			add_law = enatic_succession
			any_de_jure_vassal = {
				limit = { ai = no }
				letter_event = { id = 45343 }
			}
			hidden_tooltip = { #patrician family palace workaround
				holder_scope = {
					if = {
						limit = {
							is_patrician = yes
							primary_title = { title = PREVPREV }
						}
						family_palace = { gender_succ = enatic }
						recalc_succession = yes
					}
				}	
			}
		}	
		recalc_succession = yes	
	}
	
	option = {
		name = "NO CHANGE"
		ai_chance = { 
			factor = 1 
			modifier = { factor = 0.1 }
		}
	}	
}

# Summerhall de jure title maintenance
character_event = {
	id = maintenance.41
	
	hide_window = yes
	is_triggered_only = yes
	has_global_flag = summerhall_established
	only_rulers = yes
	
	trigger = {
		has_landed_title = c_summerhall	
	}
	
	immediate = {
		c_summerhall = {
			de_jure_liege = d_kings_landing
		}
		#log = "maintenance.41: Summerhall de jure set to King's Landing"
	}
	
	option = {
		name = "OK"
	}
}

#Check the capital of rulers with two or more provinces on startup
character_event = {
	id = maintenance.42
	
	hide_window = yes
	only_playable = yes
	is_triggered_only = yes
	
	trigger = {
		num_of_count_titles = 2
		demesne_size = 2
	}
	
	immediate = {	
		capital_scope = {
			owner = {
				if = { #Check primary kingdom first
					limit = {
						character = ROOT
						any_demesne_title = {
							tier = KING
							capital_scope = {
								NOT = { province_id = PREVPREVPREV }
								owner = { character = ROOT }
							}
						}
					}
					random_demesne_title = {
						limit = { 
							tier = KING 
							capital_scope = {
								NOT = { province_id = PREVPREVPREV }
								owner = { character = ROOT }
							}
						}
						capital_scope = {
							capital_holding = {
								ROOT = { capital = PREV }
							}
						}
					}
				}
				if = { #Then check primary title
					limit = {
						character = ROOT
						primary_title = {
							capital_scope = {
								NOT = { province_id = PREVPREVPREV }
								owner = { character = ROOT }
							}
						}
					}
					primary_title = {
						capital_scope = {
							capital_holding = {
								ROOT = { capital = PREV }
							}
						}
					}
				}
			}
		}		
		### Fix capital and holdings of specific bugged titles
		if = {
			limit = { 
				has_landed_title = d_redmountains
				has_landed_title = b_starfall
			}
			b_starfall = { 
				ROOT = { capital = PREV }
			}
		}
		if = {
			limit = { 
				has_landed_title = d_riverrun
				has_landed_title = b_riverrun
			}
			b_riverrun = { 
				ROOT = { capital = PREV }
			}
		}
		if = {
			limit = { 
				has_landed_title = c_sunspear 
				dynasty = 1
			}
			b_speartower = {
				ROOT = { capital = PREV }
			}
		}
		if = {
			limit = { 
				has_landed_title = c_ten_towers
				has_landed_title = b_ten_towers 
			}
			b_ten_towers = {
				ROOT = { capital = PREV }
			}
		}
		if = {
			limit = { 
				has_landed_title = c_hornwood 
				tier = COUNT
			}
			b_castlehornwood = {
				ROOT = { capital = PREV }
			}
		}
		if = {
			limit = { 
				has_landed_title = k_stepstones
				has_global_flag = ninepenny_kings
			}
			b_bloodstone = {
				ROOT = { capital = PREV }
			}
		}
	}
	
	option = {
		name = "OK"
	}
}

#Special titles for titular kingdoms, on_new_holder
character_event = {
	id = maintenance.43
	
	hide_window = yes
	only_playable = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = {
			tier = KING
			OR = {
				title = k_wolfswoodTK
				title = k_barrowlandsTK
				title = k_theneckTK
				title = k_dreadfortTK
				title = k_winterfellTK
				title = k_riverrunTK
				title = k_dragonstone
				title = k_duskendaleTK
				title = k_shipbreakerTK
			}
		}
		tier = KING
		government = feudal_government
		primary_title = {
			title = FROM 
			NOT = { check_variable = { which = "lord_paramount_status" value = 0.9 } }#1 = lord paramount, 2 = interregnum
		}
		NOT = { culture_group = hyrkoon_group }
		NOT = { culture = yi_ti }
		NOT = { culture = dothraki }
		NOT = { culture = jogos_nhai }
	}
	
	immediate = {	
		if = {
			limit = { FROM = { title = k_wolfswoodTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = wolfking_male
					remove_special_character_title = wolfking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = wolfking_male
				break = yes
			}
			set_special_character_title = wolfking_female
			break = yes		
		}
		if = {
			limit = { FROM = { title = k_barrowlandsTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = barrowking_male
					remove_special_character_title = barrowking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = barrowking_male
				break = yes
			}
			set_special_character_title = barrowking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_theneckTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = marshking_male
					remove_special_character_title = marshking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = marshking_male
				break = yes
			}
			set_special_character_title = marshking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_dreadfortTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = dreadking_male
					remove_special_character_title = dreadking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = dreadking_male
				break = yes
			}
			set_special_character_title = dreadking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_winterfellTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = winterking_male
					remove_special_character_title = winterking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = winterking_male
				break = yes
			}
			set_special_character_title = winterking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_riverrunTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = riverking_male
					remove_special_character_title = riverking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = riverking_male
				break = yes
			}
			set_special_character_title = riverking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_dragonstone } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = dragonking_male
					remove_special_character_title = dragonking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = dragonking_male
				break = yes
			}
			set_special_character_title = dragonking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_duskendaleTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = shadowking_male
					remove_special_character_title = shadowking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = shadowking_male
				break = yes
			}
			set_special_character_title = shadowking_female
			break = yes	
		}
		if = {
			limit = { FROM = { title = k_shipbreakerTK } }
			FROMFROM = {
				if = {
					limit = { is_alive = yes }
					remove_special_character_title = Sking
					remove_special_character_title = Sking_female
				}
			}
			if = {
				limit = { is_female = no }
				set_special_character_title = Sking
				break = yes
			}
			set_special_character_title = Sking_female
			break = yes	
		}
	}
	
	option = {
		name = "OK"
	}
}

#Mercenary dynasty fix, on_new_holder (stop lowborn successors taking the dynasty of predecessor)
character_event = {
	id = maintenance.44
	
	hide_window = yes
	only_rulers = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { mercenary = yes }
		primary_title = { mercenary = yes }
		dynasty = FROMFROM
		NOR = {
			father_even_if_dead = { dynasty = ROOT }
			mother_even_if_dead = { dynasty = ROOT }
		}
	}
	
	immediate = {	
		dynasty = father_bastard
		recalc_succession = yes
	}
	
	option = {
		name = "OK"
	}
}
#Mercenary culture fix, (stop new commanders taking the culture of the merc company)
character_event = {
	id = maintenance.45
	
	hide_window = yes
	only_rulers = yes
	is_triggered_only = yes
	
	trigger = {
		primary_title = { mercenary = yes }
	}
	
	immediate = {	
		random_courtier = {
			limit = { has_character_flag = merc_culture_dummy }
			ROOT = { culture = PREV }
			death = yes
		}
		recalc_succession = yes
	}
	
	option = {
		name = "OK"
	}
}
#On ruler death, prevent important courtier culling
character_event = {
	id = maintenance.46
	
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_ruler = no
	}
	
	immediate = {	
		liege = {
			create_character = {
				random_traits = yes
				dynasty = NONE
				female = no
				age = 80
				culture = ROOT
				religion = ROOT
			}
			new_character = {
				ROOT = { set_father = PREV }
				death = yes
			}
		}
	}
	
	option = {
		name = "OK"
	}
}
# #Make sure only correct characters are born with mark trait
# character_event = {
	# id = maintenance.47 #MERGED WITH BIRTH.990
	
	# hide_window = yes
	# is_triggered_only = yes
	
	# option = {
		# name = "OK"
	# }
# }
#Emperor gives away secondary empire maintenance
character_event = {
	id = maintenance.48
	
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { tier = EMPEROR }
		FROMFROM = { 
			tier = EMPEROR
			is_alive = yes			
		}
		NOT = {
			any_demesne_title = {
				tier = EMPEROR
				NOT = { title = FROM }
			}
		}
	}
	
	immediate = {	
		#Transfer dejure vassals titles
		FROMFROM = {
			any_vassal = {
				limit = {
					primary_title = { empire = { holder = ROOT } }
				}
				set_defacto_liege = ROOT				
			}
			any_demesne_title = {
				limit = {
					empire = { holder = ROOT }
					location = { is_capital = no }
				}
				grant_title = ROOT
			}
		}
		#Reset mega war flags for split rulers
		any_independent_ruler = {
			limit = {
				NOT = { tier = EMPEROR }
				primary_title = { 
					FROMFROM = { 
						any_demesne_title = {
							tier = EMPEROR
							is_variable_equal = { which = "de_facto_empire" which = PREVPREV } 
						} 
					}
					empire = { title = FROM } 
					check_variable = { which = "de_facto_empire" value = 0.9 }
				}
			}
			any_demesne_title = { 
				limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
				set_variable = { which = "de_facto_empire" value = 0 } 
				set_variable = { which = "de_facto_empire" which = FROM }
			}
			any_realm_lord = { 
				any_demesne_title = { 
					limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
					set_variable = { which = "de_facto_empire" value = 0 } 
					set_variable = { which = "de_facto_empire" which = FROM }
				}
			}
		}
		#Reset all mega flags in new empire
		any_demesne_title = { 
			limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
			set_variable = { which = "de_facto_empire" value = 0 } 
		}
		any_realm_lord = { 
			any_demesne_title = { 
				limit = { NOT = { tier = BARON } NOT = { tier = EMPEROR } }
				set_variable = { which = "de_facto_empire" value = 0 } 
			}
			any_demesne_title = { 
				limit = { NOT = { tier = BARON } lower_tier_than = KING }
				set_variable = { which = "de_facto_kingdom" value = 0 } 
			}
		}
		# any_realm_title = {
			# limit = { FROMFROM = { has_claim = PREV } }
			# remove_claim = FROMFROM
		# }
	}
	
	option = {
		name = "OK"
	}
}
#Ai job action control
character_event = {
	id = maintenance.49
	
	hide_window = yes
	is_triggered_only = yes
	only_playable = yes
	ai = yes
	
	trigger = {
		demesne_size = 1
	}
	
	immediate = {	
		capital_scope = {
			ROOT = {
				#Castellan
				job_castellan = {
					if = {
						limit = { has_job_action = no }
						if = {
							limit = { PREVPREV = { NOT = { revolt_risk = 5 } } }
							if = {
								limit = { ROOT = { is_nomadic = no } }
								set_job_action = {
									action = action_oversee_province
									where = PREVPREV
								}
							}
							if = {
								limit = { ROOT = { is_nomadic = yes } }
								set_job_action = {
									action = action_oversee_province_nomadic
									where = PREVPREV
								}
							}
						}
						if = {
							limit = { PREVPREV = { revolt_risk = 5 } }
							if = {
								limit = { ROOT = { is_nomadic = no } }
								set_job_action = {
									action = action_pacify_province
									where = PREVPREV
								}
							}
							if = {
								limit = { ROOT = { is_nomadic = yes } }
								set_job_action = {
									action = action_pacify_province_nomadic
									where = PREVPREV
								}
							}
						}
					}
				}
				#Treasurer
				job_treasurer = {
					if = {
						limit = { has_job_action = no }
						if = {
							limit = { ROOT = { is_nomadic = no } }
							set_job_action = {
								action = action_squeeze_peasants
								where = PREVPREV
							}
						}
						if = {
							limit = { ROOT = { is_nomadic = yes } }
							set_job_action = {
								action = action_build_legend
								where = PREVPREV
							}
						}
					}
				}
				#Marshal
				job_marshal = {
					if = {
						limit = { 
							ROOT = { is_nomadic = no }
							PREVPREV = { revolt_risk = 5 } 
						}
						set_job_action = {
							action = action_assist_arrest
							where = PREVPREV
						}
					}
					if = {
						limit = { has_job_action = no }
						if = {
							limit = { ROOT = { is_nomadic = no } }
							set_job_action = {
								action = action_train_troops
								where = PREVPREV
							}
						}
						if = {
							limit = { ROOT = { is_nomadic = yes } }
							set_job_action = {
								action = action_train_troops_nomadic
								where = PREVPREV
							}
						}
					}	
				}
			}	
		}	
	}
	
	option = {
		name = "OK"
	}
}

# Give dragonss a fake focus so as to avoid the annoying pop up for players
character_event = {
	id = maintenance.50
	
	hide_window = yes
	is_triggered_only = yes
	ai = yes
	max_age = 16
	has_dlc = "Zeus"
	
	trigger = {
		trait = dragon
	}
	
	immediate = {
		if = {
			limit = { NOT = { age = 12 } }
			clear_focus = yes
			set_focus = focus_ch_dragon
		}
		if = {
			limit = { age = 12 }
			clear_focus = yes
			set_focus = focus_ed_dragon
		}
	}
}
# Empire crown law maintenance
character_event = {
	id = maintenance.51
	
	hide_window = yes
	only_independent = yes
	is_triggered_only = yes
	
	trigger = {
		tier = EMPEROR
	}
	
	immediate = {
		#Make sure sub-kingdoms match empire tier title's laws
		any_vassal = {
			limit = { tier = KING }
			any_demesne_title = {
				limit = { 
					tier = KING 
					dejure_liege_title = { holder_scope = { character = ROOT } }
				}
				#Slavery
				if = {
					limit = { 
						dejure_liege_title = { has_law = slavery_0 }
						NOT = { has_law = slavery_0 }
					}
					add_law = slavery_0
				}	
				if = {
					limit = { 
						dejure_liege_title = { has_law = slavery_1 }
						NOT = { has_law = slavery_1 }
					}
					add_law = slavery_1
				}	
				if = {
					limit = { 
						dejure_liege_title = { has_law = slavery_2 }
						NOT = { has_law = slavery_2 }
					}
					add_law = slavery_2
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = slavery_3 }
						NOT = { has_law = slavery_3 }
					}
					add_law = slavery_3
				}
				#Crown Authority
				if = {
					limit = { 
						dejure_liege_title = { has_law = centralization_0 }
						NOT = { has_law = centralization_0 }
					}
					add_law = centralization_0
				}	
				if = {
					limit = { 
						dejure_liege_title = { has_law = centralization_1 }
						NOT = { has_law = centralization_1 }
					}
					add_law = centralization_1
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = centralization_2 }
						NOT = { has_law = centralization_2 }
					}
					add_law = centralization_2
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = centralization_3 }
						NOT = { has_law = centralization_3 }
					}
					add_law = centralization_3
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = centralization_4 }
						NOT = { has_law = centralization_4 }
					}
					add_law = centralization_4
				}
				#Faith Authority
				if = {
					limit = { 
						dejure_liege_title = { has_law = investiture_law_0 }
						NOT = { has_law = investiture_law_0 }
					}
					add_law = investiture_law_0
				}	
				if = {
					limit = { 
						dejure_liege_title = { has_law = investiture_law_1 }
						NOT = { has_law = investiture_law_1 }
					}
					add_law = investiture_law_1
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = investiture_law_2 }
						NOT = { has_law = investiture_law_2 }
					}
					add_law = investiture_law_2
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = investiture_law_3 }
						NOT = { has_law = investiture_law_3 }
					}
					add_law = investiture_law_3
				}
				#Out of realm inheritance
				if = {
					limit = { 
						dejure_liege_title = { has_law = out_of_realm_inheritance_law_0 }
						NOT = { has_law = out_of_realm_inheritance_law_0 }
					}
					add_law = out_of_realm_inheritance_law_0
				}
				if = {
					limit = { 
						dejure_liege_title = { has_law = out_of_realm_inheritance_law_1 }
						NOT = { has_law = out_of_realm_inheritance_law_1 }
					}
					add_law = out_of_realm_inheritance_law_1
				}
			}	
			any_demesne_title = { #Any sub-kingdoms with no dejure empire follow primary empire
				limit = { 
					tier = KING 
					NOT = { dejure_liege_title = { always = yes } }
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = slavery_0 } }
						NOT = { has_law = slavery_0 }
					}
					add_law = slavery_0
				}	
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = slavery_1 } }
						NOT = { has_law = slavery_1 }
					}
					add_law = slavery_1
				}	
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = slavery_2 } }
						NOT = { has_law = slavery_2 }
					}
					add_law = slavery_2
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = slavery_3 } }
						NOT = { has_law = slavery_3 }
					}
					add_law = slavery_3
				}
				#Crown Authority
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = centralization_0 } }
						NOT = { has_law = centralization_0 }
					}
					add_law = centralization_0
				}	
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = centralization_1 } }
						NOT = { has_law = centralization_1 }
					}
					add_law = centralization_1
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = centralization_2 } }
						NOT = { has_law = centralization_2 }
					}
					add_law = centralization_2
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = centralization_3 } }
						NOT = { has_law = centralization_3 }
					}
					add_law = centralization_3
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = centralization_4 } }
						NOT = { has_law = centralization_4 }
					}
					add_law = centralization_4
				}
				#Faith Authority
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = investiture_law_0 } }
						NOT = { has_law = investiture_law_0 }
					}
					add_law = investiture_law_0
				}	
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = investiture_law_1 } }
						NOT = { has_law = investiture_law_1 }
					}
					add_law = investiture_law_1
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = investiture_law_2 } }
						NOT = { has_law = investiture_law_2 }
					}
					add_law = investiture_law_2
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = investiture_law_3 } }
						NOT = { has_law = investiture_law_3 }
					}
					add_law = investiture_law_3
				}
				#Out of realm inheritance
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = out_of_realm_inheritance_law_0 } }
						NOT = { has_law = out_of_realm_inheritance_law_0 }
					}
					add_law = out_of_realm_inheritance_law_0
				}
				if = {
					limit = { 
						ROOT = { primary_title = { has_law = out_of_realm_inheritance_law_1 } }
						NOT = { has_law = out_of_realm_inheritance_law_1 }
					}
					add_law = out_of_realm_inheritance_law_1
				}
			}			
		}
	}
	
	option = { name = OK }
}
# Empire AI vassal limit management (make them give kingdom titles and transfer logical vassals)
#on_new_holder and after mega wars
character_event = {
	id = maintenance.52
	
	hide_window = yes
	only_independent = yes
	#is_triggered_only = yes
	
	trigger = {
		tier = EMPEROR
		over_vassal_limit = 1
		ai = yes
		NOT = { has_character_flag = changing_westerosi_kingdom_tier }
		OR = {
			NOT = { has_character_flag = vassal_limit_management_failed }
			had_character_flag = { flag = vassal_limit_management_failed days = 730 }
		}
	}
	
	immediate = {
		clr_character_flag = vassal_limit_management_failed
		
		#Take back duchies which AI will stupidly grant to avoid vassal limit
		any_demesne_province = {
			duchy = {
				if = {
					limit = {
						any_previous_holder = { character = ROOT }
						holder_scope = {
							liege = { character = ROOT }
							has_opinion_modifier = { who = ROOT modifier = opinion_granted_duchy }		
						}
					}
					holder_scope = { remove_opinion = { who = ROOT modifier = opinion_granted_duchy }	}
					gain_title = ROOT
				}
			}
		}
		#Transfer count vassals
		any_realm_lord = {
			limit = {
				higher_tier_than = COUNT
				war = no
				opinion = { who = ROOT value = -24 }
				reverse_opinion = { who = ROOT value = -24 }
			}
			ROOT = {
				any_vassal = {
					limit = {
						tier = COUNT
						war = no
						primary_title = {	
							OR = {
								has_de_jure_pretension = PREVPREVPREV
								dejure_liege_title = { has_de_jure_pretension = PREVPREVPREVPREV }
							}
						}
						NOT = {
							any_demesne_title = {
								OR = {
									duchy = { holder = ROOT }
									kingdom = { holder = ROOT }
									AND = {
										kingdom = { title = k_crownlands }
										ROOT = { has_landed_title = e_iron_throne }
									}
								}
							}
						}
					}
					set_defacto_liege = PREVPREV
					PREVPREV = { opinion = { who = ROOT modifier = opinion_vassal_transfer } }
				}
			}
		}
		if = {
			limit = { NOT = { over_vassal_limit = 1 } }
			break = yes
		}
		#Then dukes
		any_vassal = {
			limit = {
				tier = KING
				war = no
				opinion = { who = ROOT value = -24 }
				reverse_opinion = { who = ROOT value = -24 }
			}
			ROOT = {
				any_vassal = {
					limit = {
						tier = DUKE
						war = no
						primary_title = {	
							has_de_jure_pretension = PREVPREVPREV
						}
						NOT = {
							any_demesne_title = {
								OR = {
									kingdom = { holder = ROOT }
									AND = {
										kingdom = { title = k_crownlands }
										ROOT = { has_landed_title = e_iron_throne }
									}
								}
							}
						}
					}
					set_defacto_liege = PREVPREV
					PREVPREV = { opinion = { who = ROOT modifier = opinion_vassal_transfer } }
				}
			}
		}
		if = {
			limit = { NOT = { over_vassal_limit = 1 } }
			break = yes
		}
		clear_event_target = kingdom_to_give_away
		#Find a kingdom to give away
		random_demesne_title = {
			limit = {
				tier = KING
				is_titular = no
				any_de_jure_vassal_title = {
					tier = COUNT
					location = {
						is_capital = yes
						owner = {
							vassal_of = ROOT
							OR = {
								tier = COUNT
								tier = DUKE
							}
						}
					}
				}
				NOT = {
					any_de_jure_vassal_title = {
						tier = COUNT
						location = {
							is_capital = yes
							owner = { character = ROOT }
						}
					}
				}
				ROOT = {
					any_vassal = {
						OR = {
							tier = COUNT
							tier = DUKE
						}
						NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_revoked_my_title } }
						NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_usurped_title } }
						reverse_opinion = { who = ROOT value = -39 }
						opinion = { who = ROOT value = -39 }
						capital_scope = {
							county = {
								de_jure_liege_or_above = PREVPREVPREVPREV
							}
						}	
					}
				}
			}
			save_event_target_as = kingdom_to_give_away
		}
		if = { #try and find vacant kingdom
			limit = { NOT = { event_target:kingdom_to_give_away = { always = yes } } }
			random_realm_lord = {
				limit = {
					capital_scope = {
						kingdom = {
							has_holder = no 
							OR = { #Must hold title or control all the territory
								ROOT = { completely_controls = PREV }
								NOT = { 
									any_direct_de_jure_vassal_title = {
										holder_scope = {
											NOT = { is_liege_or_above = ROOT }
											NOT = { character = ROOT }
											NOT = { culture_group = unoccupied_group }
										}
									}
								}	
							}
							NOT = { any_war = { always = yes } } #is not being contested
							OR = { #Cannot request Sarnor or North Valyria if they have had no previous holder
								NOT = { 
									OR = {
										title = k_sarnor
										title = k_north_valyria
									}	
								}
								any_previous_holder = { always = yes }
							}
							OR = { #Can only request Andalos or Rhoyne if correct culture
								NOT = { title = k_andalos }
								ROOT = { culture_group = andal }
							}
							OR = { #Can only request Andalos or Rhoyne if correct culture
								NOT = { title = k_rhoynar }
								ROOT = { culture_group = dornish }
							}
							NOT = {
								OR = {
									title = k_beyond_wall
									title = k_nightswatch
									title = k_dragonstone
									title = k_crackclaw_point
									title = k_crownlands
								}
							}
							NOR = { #cannot request a title if equivalent kingdom exists
								AND = {
									title = k_north
									e_north = { has_holder = yes }
								}
								AND = {
									title = k_riverlands
									e_riverlands = { has_holder = yes }
								}
								AND = {
									title = k_vale
									e_vale = { has_holder = yes }
								}
								AND = {
									title = k_westerlands
									e_westerlands = { has_holder = yes }
								}
								AND = {
									title = k_reach
									e_reach = { has_holder = yes }
								}
								AND = {
									title = k_stormlands
									e_stormlands = { has_holder = yes }
								}
								AND = {
									title = k_dorne
									e_dorne = { has_holder = yes }
								}
								AND = {
									title = k_iron_isles
									e_iron_isles = { has_holder = yes }
								}
							}
						}
					}
				}
				capital_scope = { kingdom = { save_event_target_as = kingdom_to_give_away } }
			}
		}
		#Try giving to owner of capital
		event_target:kingdom_to_give_away = {
			capital_scope = {
				owner = {
					if = {
						limit = {						
							vassal_of = ROOT
							OR = {
								tier = COUNT
								tier = DUKE
							}
							NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_revoked_my_title } }
							NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_usurped_title } }
							reverse_opinion = { who = ROOT value = -39 }
							opinion = { who = ROOT value = -39 }
						}
						event_target:kingdom_to_give_away = { grant_title = PREV }
						if = {
							limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_kingdom } } }
							opinion = {
								who = ROOT
								modifier = opinion_granted_kingdom
							}
						} 
						hidden_tooltip = { 
							letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
							if = {
								limit = { NOT = { liege = { character = ROOT } } }
								set_defacto_liege = ROOT
							}	
						}
						ROOT = {
							if = { #if still over vassal limit after granting kingdom, try again
								limit = { over_vassal_limit = 1 }
								character_event = { id = maintenance.52 days = 3 }
							}
						}	
						break = yes
					}
				}
			}
		}		
		#If a province is owned in the kingdom, try giving to family/friends
		if = {
			limit = {
				any_demesne_title = {
					tier = count
					location = { is_capital = no }
					de_jure_liege_or_above = event_target:kingdom_to_give_away
				}
			}
			random_dynasty_member = {
				limit = {
					is_liege_or_above = ROOT
					is_close_relative = ROOT
					is_ruler = no
					NOT = { trait = incapable }
					prisoner = no
					OR = {
						is_primary_heir = no
						sibling = ROOT
					}
					can_inherit_titles_trigger = yes
					OR = { #if child, must be traditional LP
						is_adult = yes
						AND = {
							dynasty = 59
							FROM = { primary_title = { dejure_liege_title = { title = k_north } } }					
						}
						AND = {
							dynasty = 178
							FROM = { primary_title = { dejure_liege_title = { title = k_vale } } }										
						}
						AND = {
							dynasty = 190
							FROM = { primary_title = { dejure_liege_title = { title = k_westerlands } } }										
						}
						AND = {
							dynasty = 1254
							FROM = { primary_title = { dejure_liege_title = { title = k_reach } } }										
						}
						AND = {
							dynasty = 317
							FROM = { primary_title = { dejure_liege_title = { title = k_stormlands } } }										
						}
						AND = {
							dynasty = 1
							FROM = { primary_title = { dejure_liege_title = { title = k_dorne } } }										
						}
						FROM = { primary_title = { dejure_liege_title = { culture = ROOT } } }	
					}
					OR = {
						is_female = no
						liege = {
							primary_title = {
								OR = {
									has_law = enatic_cognatic_succession
									has_law = enatic_succession
									has_law = true_cognatic_succession
								}
							}
						}
					}
					OR = {
						is_female = yes
						liege = {
							primary_title = {
								OR = {
									has_law = cognatic_succession
									has_law = agnatic_succession
									has_law = true_cognatic_succession
								}
							}
						}
					}
				}	
				event_target:kingdom_to_give_away = { grant_title = PREV }
				if = {
					limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_kingdom } } }
					opinion = {
						who = ROOT
						modifier = opinion_granted_kingdom
					}
				} 
				hidden_tooltip = { 
					letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
					if = {
						limit = { NOT = { liege = { character = ROOT } } }
						set_defacto_liege = ROOT
					}	
				}
				ROOT = {
					if = { #if still over vassal limit after granting kingdom, try again
						limit = { over_vassal_limit = 1 }
						character_event = { id = maintenance.52 days = 3 }
					}
				}
				break = yes				
			}
			random_friend = {
				limit = {
					is_liege_or_above = ROOT
					is_ruler = no
					NOT = { trait = incapable }
					OR = {
						is_primary_heir = no
						sibling = ROOT
					}
					can_inherit_titles_trigger = yes
					is_adult = yes
					OR = {
						is_female = no
						liege = {
							primary_title = {
								OR = {
									has_law = enatic_cognatic_succession
									has_law = enatic_succession
									has_law = true_cognatic_succession
								}
							}
						}
					}
					OR = {
						is_female = yes
						liege = {
							primary_title = {
								OR = {
									has_law = cognatic_succession
									has_law = agnatic_succession
									has_law = true_cognatic_succession
								}
							}
						}
					}
				}	
				event_target:kingdom_to_give_away = { grant_title = PREV }
				if = {
					limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_kingdom } } }
					opinion = {
						who = ROOT
						modifier = opinion_granted_kingdom
					}
				} 
				hidden_tooltip = { 
					letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
					if = {
						limit = { NOT = { liege = { character = ROOT } } }
						set_defacto_liege = ROOT
					}	
				}
				ROOT = {
					if = { #if still over vassal limit after granting kingdom, try again
						limit = { over_vassal_limit = 1 }
						character_event = { id = maintenance.52 days = 3 }
					}
				}
				break = yes				
			}
		}
		#Liked Vassal in the kingdom
		random_vassal = {
			limit = {
				OR = {
					tier = COUNT
					tier = DUKE
				}
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_revoked_my_title } }
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_usurped_title } }
				reverse_opinion = { who = ROOT value = -39 }
				opinion = { who = ROOT value = -39 }
				capital_scope = {
					county = {
						de_jure_liege_or_above = event_target:kingdom_to_give_away
					}
				}	
			}
			event_target:kingdom_to_give_away = { grant_title = PREV }
			if = {
				limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_kingdom } } }
				opinion = {
					who = ROOT
					modifier = opinion_granted_kingdom
				}
			} 
			hidden_tooltip = { 
				letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}	
			}
			ROOT = {
				if = { #if still over vassal limit after granting kingdom, try again
					limit = { over_vassal_limit = 1 }
					character_event = { id = maintenance.52 days = 3 }
				}
			}
			break = yes
		}
		#Random vassal
		random_vassal = {
			limit = {
				OR = {
					tier = COUNT
					tier = DUKE
				}
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_revoked_my_title } }
				NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_usurped_title } }
				capital_scope = {
					county = {
						de_jure_liege_or_above = event_target:kingdom_to_give_away
					}
				}	
			}
			event_target:kingdom_to_give_away = { grant_title = PREV }
			if = {
				limit = { NOT = { has_opinion_modifier = { who = ROOT modifier = opinion_granted_kingdom } } }
				opinion = {
					who = ROOT
					modifier = opinion_granted_kingdom
				}
			} 
			hidden_tooltip = { 
				letter_event = { id = 63078 tooltip = EVTTOOLTIP63078 days = 1 }
				if = {
					limit = { NOT = { liege = { character = ROOT } } }
					set_defacto_liege = ROOT
				}	
			}
			ROOT = {
				if = { #if still over vassal limit after granting kingdom, try again
					limit = { over_vassal_limit = 1 }
					character_event = { id = maintenance.52 days = 3 }
				}
			}
			break = yes
		}
		#If this has all failed, put break on event
		if = {
			limit = { over_vassal_limit = 1 }
			set_character_flag = vassal_limit_management_failed
		}
	}
	
	option = { name = OK }
}

#Rainwood de jure title maintenance
character_event = {
	id = maintenance.53
	
	hide_window = yes
	is_triggered_only = yes
	only_playable = yes
	has_global_flag = davos_appeared
	
	trigger = {		
		has_landed_title = c_rainwood	
	}
	
	immediate = {
		c_rainwood = {
			de_jure_liege = d_rainwood
		}
		if = {
			limit = {
				NOT = { higher_tier_than = COUNT }
				liege = { 
					has_landed_title = d_dragonstone 
					NOR = {
						has_landed_title = d_rainwood
						has_landed_title = k_stormlands
						has_landed_title = e_stormlands
					}
				}
				dynasty = 9110
			}
			c_rainwood = {
				de_jure_liege = d_dragonstone
			}
		}	
		#log = "maintenance.41: Rainwood de jure set to Dragonstone"
	}
	
	option = {
		name = "OK"
	}
}
#Triggered modifiers
character_event = {
	id = maintenance.54
	
	hide_window = yes
	is_triggered_only = yes
	only_playable = yes
	
	immediate = {
		remove_character_modifier = martial_very_low
		remove_character_modifier = martial_low
		remove_character_modifier = martial_low_medium
		remove_character_modifier = martial_medium
		remove_character_modifier = martial_medium_high
		remove_character_modifier = martial_high
		remove_character_modifier = martial_very_high
		remove_character_modifier = high_valyrian_modifier
		if = {
			limit = { culture = high_valyrian }
			add_character_modifier = { name = high_valyrian_modifier duration = -1 }		
		}
		if = {
			limit = { martial = 19 }
			add_character_modifier = { name = martial_very_high duration = -1 }
			break = yes
		}
		if = {
			limit = { martial = 14 }
			add_character_modifier = { name = martial_high duration = -1 }
			break = yes
		}
		if = {
			limit = { martial = 11 }
			add_character_modifier = { name = martial_medium_high duration = -1 }
			break = yes
		}
		if = {
			limit = { martial = 8 }
			add_character_modifier = { name = martial_medium duration = -1 }
			break = yes
		}
		if = {
			limit = { martial = 5 }
			add_character_modifier = { name = martial_low_medium duration = -1 }
			break = yes
		}
		if = {
			limit = { martial = 2 }
			add_character_modifier = { name = martial_low duration = -1 }
			break = yes
		}
		add_character_modifier = { name = martial_very_low duration = -1 }
	}
	
	option = {
		name = "OK"
	}
}
#Ruler becomes unlanded, lose ruler related modifiers
character_event = {
	id = maintenance.55
	
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		remove_character_modifier = martial_very_low
		remove_character_modifier = martial_low
		remove_character_modifier = martial_low_medium
		remove_character_modifier = martial_medium
		remove_character_modifier = martial_medium_high
		remove_character_modifier = martial_high
		remove_character_modifier = martial_very_high
		remove_character_modifier = high_valyrian_modifier
	}
	
	option = {
		name = "OK"
	}
}
#In debt modifier
character_event = {
	id = maintenance.56

	only_playable = yes
	hide_window = yes
	
	trigger = {
		NOT = { wealth = 0 }
		NOT = { has_character_flag = debt_modifier }
	}
	
	immediate = {
		set_character_flag = debt_modifier
		character_event = { id = maintenance.57 days = 1 }
	}
	
	option = {
		name = OK
	}
}
character_event = {
	id = maintenance.57

	is_triggered_only = yes
	hide_window = yes
	
	trigger = {
		has_character_flag = debt_modifier
	}
	
	immediate = {
		remove_character_modifier = negative_money_1
		remove_character_modifier = negative_money_2
		remove_character_modifier = negative_money_3
		if = {
			limit = {
				OR = {
					wealth = 0
					is_ruler = no
				}
			}
			clr_character_flag = debt_modifier			
			break = yes
		}
		character_event = { id = maintenance.57 days = 60 } #check modifier bi-monthly		
		if = {
			limit = { NOT = { wealth = -400 } }
			add_character_modifier = { name = negative_money_3 duration = -1 }
			break = yes
		}
		if = {
			limit = { NOT = { wealth = -200 } }
			add_character_modifier = { name = negative_money_2 duration = -1 }
			break = yes
		}
		add_character_modifier = { name = negative_money_1 duration = -1 }
	}
	
	option = {
		name = OK
	}
}
character_event = { #Find active player regions for maintenance
	id = maintenance.59

	is_triggered_only = yes
	hide_window = yes
	ai = no

	immediate = {
		if = {
			limit = { capital_scope = { region = world_westeros } }
			set_global_flag = westeros_active
			set_global_flag = free_cities_active
			set_global_flag = summer_sea_active
		}
		if = {
			limit = { capital_scope = { region = world_free_cities } }
			set_global_flag = westeros_active
			set_global_flag = free_cities_active
			set_global_flag = slavers_bay_active
			set_global_flag = grasslands_active
			set_global_flag = summer_sea_active
		}
		if = {
			limit = { capital_scope = { region = world_ghiscar } }
			set_global_flag = free_cities_active
			set_global_flag = slavers_bay_active
			set_global_flag = grasslands_active
			set_global_flag = summer_sea_active
			set_global_flag = far_east_active
		}
		if = {
			limit = { capital_scope = { region = world_dothraki_sea } }
			set_global_flag = free_cities_active
			set_global_flag = slavers_bay_active
			set_global_flag = grasslands_active
			set_global_flag = far_east_active
			set_global_flag = ibben_active
		}	
		if = {
			limit = { capital_scope = { region = world_summer_sea } }
			set_global_flag = westeros_active
			set_global_flag = free_cities_active
			set_global_flag = summer_sea_active
			set_global_flag = slavers_bay_active
		}
		if = {
			limit = { 
				capital_scope = { 
					OR = {
						region = world_jade_sea
						region = world_far_east
					}	
				}						
			}
			set_global_flag = far_east_active	
			set_global_flag = slavers_bay_active	
			set_global_flag = ibben_active
			set_global_flag = grasslands_active		
		}
		if = {
			limit = { capital_scope = { region = world_ibben } }
			set_global_flag = ibben_active
			set_global_flag = grasslands_active
			set_global_flag = far_east_active
			set_global_flag = free_cities_active
		}
	}
	
	option = {
		name = OK
	}
}
#Heir prisoner release bug workaround, put back in prison
character_event = {
	id = maintenance.60

	is_triggered_only = yes
	hide_window = yes
	prisoner = no
	
	trigger = {
		event_target:heir_prisoner_host = {
			is_alive = yes
			is_ruler = yes
		}
	}

	immediate = {
		imprison = event_target:heir_prisoner_host
	}
	
	option = {
		name = OK
	}
}

